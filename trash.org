#+title: Trash


* mail

** account
#+begin_src emacs-lisp 
  (load-file "~/.emacs.d/private.el")



  (setq gnus-select-method
        '(nnimap "zoho"
                 (nnimap-address "imappro.zoho.com")
                 (nnimap-server-port 993)
                 (nnimap-stream ssl)
                 ;; (nnmail-expiry-target "zoho/Trash")
                 ;; (nnmail-expiry-wait 90)
                 ))


  (setq smtpmail-smtp-server "smtppro.zoho.com"
        smtpmail-smtp-service 465
        smtpmail-stream-type 'ssl
        ;; smtpmail-stream-type 'starttls
        )

  (setq gnus-secondary-select-methods
        '((nntp "gwene"
                (nntp-address "news.gwene.org"))
          (nnrss "")))

  ;; (add-to-list 'gnus-secondary-select-methods
  ;;              '(nnimap "sysu"
  ;;                       (nnimap-address "imap.exmail.qq.com")
  ;;                       (nnimap-user (getenv "SYSU_USER"))
  ;;                       (nnimap-server-port 993)
  ;;                       (nnimap-stream ssl)
  ;;                       ; @see http://www.gnu.org/software/emacs/manual/html_node/gnus/Expiring-Mail.html
  ;;                       ;; press 'E' to expire email
  ;;                       ;; (nnmail-expiry-target "nnimap+gmail:[Gmail]/Trash")
  ;;                       ;; (nnmail-expiry-wait 90)
  ;;                       ))

  ;; (setq gnus-posting-styles
  ;;       '(("sysu"
  ;;          (address (getenv "SYSU_USER"))
  ;;          (gnus-message-headers "From: user2@example.com\n")
  ;;          (organization "")
  ;;          (smtp-server "smtp.exmail.qq.com"))
  ;;         ("zoho"
  ;;          (address (getenv "ZOZHO_USER"))
  ;;          (gnus-message-headers "From: user1@example.com\n")
  ;;          (organization "")
  ;;          (smtp-server "smtppro.zoho.com"))))

  (setq message-send-mail-function 'smtpmail-send-it)
#+end_src

** basic 

#+begin_src elisp
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)
  ;; (setq gnus-summary-ignore-most-enemies nil)
  ;; (setq gnus-permanently-visible-groups ".*")  
  ;; (setq gnus-use-followup-to t)
  ;; (setq gnus-check-new-newsgroups nil)  

  (setq gnus-use-cache t)

  (setq gnus-thread-sort-functions
        '(gnus-thread-sort-by-most-recent-date
          (not gnus-thread-sort-by-number)))

  ;; Fetch only part of the article if we can.
  ;; I saw this in someone's .gnus
  (setq gnus-read-active-file 'some)

  (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)


  ;; Threads!  I hate reading un-threaded email -- especially mailing
  ;; lists.  This helps a ton!
  (setq gnus-summary-thread-gathering-function 'gnus-gather-threads-by-subject)


  ;; Also, I prefer to see only the top level message.  If a message has
  ;; several replies or is part of a thread, only show the first message.
  ;; `gnus-thread-ignore-subject' will ignore the subject and
  ;; look at 'In-Reply-To:' and 'References:' headers.
  (setq gnus-thread-hide-subtree t)
  (setq gnus-thread-ignore-subject t)

  (setq gnus-use-correct-string-widths nil)

  (global-set-key (kbd "C-c o g") 'gnus)
#+end_src

** ui
#+begin_src elisp :tangle no
  (setq nnmail-split-methods
        '(("junk" "^From:.*Lars Ingebrigtsen")
          ("crazy" "^Subject:.*die\\|^Organization:.*flabby")
          ("other" "")))

  (setq gnus-summary-line-format "%U%R%z %~(max-right 18)Date: %~(pad-right 20)From: %s\n")
#+end_src

** hydra
#+begin_src elisp
  ;; @see https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org
  ;; gnus-group-mode
  (eval-after-load 'gnus-group
    '(progn
       (defhydra hydra-gnus-group (:color blue)
         "
  [_A_] Remote groups (A A) [_g_] Refresh
  [_L_] Local groups        [_\\^_] List servers
  [_c_] Mark all read       [_m_] Compose new mail
  [_G_] Search mails (G G) [_#_] Mark mail
  "
         ("A" gnus-group-list-active)
         ("L" gnus-group-list-all-groups)
         ("c" gnus-topic-catchup-articles)
         ("G" dianyou-group-make-nnir-group)
         ("g" gnus-group-get-new-news)
         ("^" gnus-group-enter-server-mode)
         ("m" gnus-group-new-mail)
         ("#" gnus-topic-mark-topic)
         ("q" nil))
       ;; y is not used by default
       (define-key gnus-group-mode-map "y" 'hydra-gnus-group/body)))

  ;; gnus-summary-mode
  (eval-after-load 'gnus-sum
    '(progn
       (defhydra hydra-gnus-summary (:color blue)
         "
  [_s_] Show thread   [_F_] Forward (C-c C-f)
  [_h_] Hide thread   [_e_] Resend (S D e)
  [_n_] Refresh (/ N) [_r_] Reply
  [_!_] Mail -> disk  [_R_] Reply with original
  [_d_] Disk -> mail  [_w_] Reply all (S w)
  [_c_] Read all      [_W_] Reply all with original (S W)
  [_#_] Mark          [_G_] Search mails
  "
         ("s" gnus-summary-show-thread)
         ("h" gnus-summary-hide-thread)
         ("n" gnus-summary-insert-new-articles)
         ("F" gnus-summary-mail-forward)
         ("!" gnus-summary-tick-article-forward)
         ("d" gnus-summary-put-mark-as-read-next)
         ("c" gnus-summary-catchup-and-exit)
         ("e" gnus-summary-resend-message-edit)
         ("R" gnus-summary-reply-with-original)
         ("r" gnus-summary-reply)
         ("W" gnus-summary-wide-reply-with-original)
         ("w" gnus-summary-wide-reply)
         ("#" gnus-topic-mark-topic)
         ("G" dianyou-group-make-nnir-group)
         ("q" nil))
       ;; y is not used by default
       (define-key gnus-summary-mode-map "y" 'hydra-gnus-summary/body)))

  ;; gnus-article-mode
  (eval-after-load 'gnus-art
    '(progn
       (defhydra hydra-gnus-article (:color blue)
         "
  [_o_] Save attachment        [_F_] Forward
  [_v_] Play video/audio       [_r_] Reply
  [_d_] CLI to download stream [_R_] Reply with original
  [_b_] Open external browser  [_w_] Reply all (S w)
  [_f_] Click link/button      [_W_] Reply all with original (S W)
  [_g_] Focus link/button
  "
         ("F" gnus-summary-mail-forward)
         ("r" gnus-article-reply)
         ("R" gnus-article-reply-with-original)
         ("w" gnus-article-wide-reply)
         ("W" gnus-article-wide-reply-with-original)
         ("o" gnus-mime-save-part)
         ("v" my-w3m-open-with-mplayer)
         ("d" my-w3m-download-rss-stream)
         ("b" my-w3m-open-link-or-image-or-url)
         ("f" w3m-lnum-follow)
         ("g" w3m-lnum-goto)
         ("q" nil))
       ;; y is not used by default
       (define-key gnus-article-mode-map "y" 'hydra-gnus-article/body)))

  ;; message-mode
  (eval-after-load 'message
    '(progn
       (defhydra hydra-message (:color blue)
    "
  [_c_] Complete mail address
  [_a_] Attach file
  [_s_] Send mail (C-c C-c)
  "
         ("c" counsel-bbdb-complete-mail)
         ("a" mml-attach-file)
         ("s" message-send-and-exit)
         ("i" dianyou-insert-email-address-from-received-mails)
         ("q" nil))))

  (defun message-mode-hook-hydra-setup ()
    (local-set-key (kbd "C-c C-y") 'hydra-message/body))
  (add-hook 'message-mode-hook 'message-mode-hook-hydra-setup)
#+end_src

** edbd
#+begin_src emacs-lisp
  ;; (add-hook 'message-mode-hook
  ;;           '(lambda ()
  ;;              (flyspell-mode t)
  ;;              (local-set-key (kbd "TAB") 'bbdb-complete-name)))

  ;; (add-to-list 'load-path "/where/you/place/bbdb/")
  ;; (require 'bbdb)
  ;; (bbdb-initialize 'message 'gnus 'sendmail)
  ;; (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
  ;; (setq bbdb/mail-auto-create-p t
  ;;       bbdb/news-auto-create-p t)

  (require 'ebdb)
  (require 'ebdb-gnus)
  (require 'ebdb-complete)

  (ebdb-complete-enable)

  (defun kz/ebdb-set-mail-from-address (&optional records arg kill)
    (interactive (list (ebdb-prompt-for-record)
  		     current-prefix-arg))
    (let ((recs (if (listp records) records (list records)))
  	(style (if arg 'list 'inline))
  	usable str m)
      (dolist (r recs)
        (when (setq m (ebdb-record-mail r))
  	(push (cons r (or (object-assoc 'primary 'priority m)
  			  (car m)))
  	      usable)))
      (setq str (ebdb-records-cite style usable))
      (if kill
  	(progn
  	  (kill-new str)
  	  (message "Citation added to kill ring"))
        (save-excursion
          (goto-char (point-min))
          (when (re-search-forward "^From:.*" nil t)
            (replace-match (format "From: %s" str)))))))

  (defun kz/ebdb-set-mail-to-address (&optional records arg kill)
    (interactive (list (ebdb-prompt-for-record)
  		     current-prefix-arg))
    (let ((recs (if (listp records) records (list records)))
  	(style (if arg 'list 'inline))
  	usable str m)
      (dolist (r recs)
        (when (setq m (ebdb-record-mail r))
  	(push (cons r (or (object-assoc 'primary 'priority m)
  			  (car m)))
  	      usable)))
      (setq str (ebdb-records-cite style usable))
      (if kill
  	(progn
  	  (kill-new str)
  	  (message "Citation added to kill ring"))
        (save-excursion
          (goto-char (point-min))
          (when (re-search-forward "^To:.*" nil t)
            (replace-match (format "To: %s" str)))))))

  (define-key message-mode-map (kbd "C-c e f") 'kz/ebdb-set-mail-from-address)
  (define-key message-mode-map (kbd "C-c e t") 'kz/ebdb-set-mail-to-address)
#+end_src

** other
#+begin_src emacs-lisp
  (eval-after-load 'gnus-topic
    '(progn
       (setq gnus-message-archive-group '((format-time-string "sent.%Y")))
       (setq gnus-server-alist '(("archive" nnfolder "archive" (nnfolder-directory "~/Mail/archive")
                                  (nnfolder-active-file "~/Mail/archive/active")
                                  (nnfolder-get-new-mail nil)
                                  (nnfolder-inhibit-expiry t))))

       ;; "Gnus" is the root folder, and there are three mail accounts, "misc", "hotmail", "gmail"
       (setq gnus-topic-topology '(("Gnus" visible)
                                   (("Zoho" visible))
                                   (("News" visible))
                                   (("misc" visible))
                                   ;; (("gmail" visible nil nil))
                                   ))

       ;; each topic corresponds to a public imap folder
       (setq gnus-topic-alist '(("Zoho" ; the key of topic
                                 "INBOX"
                                 "Notification"
                                 "Archive"
                                 "Drafts"
                                 "Sent"
                                 "Spam"
                                 "Trash"
                                 "Drafts"
                                 "Newsletter"
                                 "Templates")
                                ;; ("gmail" ; the key of topic
                                ;;  "nnimap+gmail:INBOX"
                                ;;  "nnimap+gmail:[Gmail]/Sent Mail"
                                ;;  "nnimap+gmail:[Gmail]/Trash"
                                ;;  "nnimap+gmail:Drafts")
                                ("misc" ; the key of topic
                                 "nntp+gwene:gwene.com.stackoverflow.feeds.tag.emacs"
                                 "nntp+gwene:gwene.net.systemcrafters.rss.news"
                                 "nnrss:NYT > Technology"
                                 "nndraft:drafts")
                                ("News"
                                 "nnrss:Debian News"
)
                                ("Gnus")))

       ;; see latest 200 mails in topic hen press Enter on any group
       (gnus-topic-set-parameters "zoho" '((display . 200)))
       ;; (gnus-topic-set-parameters "hotmail" '((display . 200)))
       ))
#+end_src

** rss
#+begin_src elisp
  (setq nnrss-directory "~/News/rss")

  (setq nnrss-group-urls
        '(("Debian Latest News" "https://www.debian.org/News/news")
          ("Econ arXiv" "https://rss.arxiv.org/rss/econ")
          ("Q-fin arXiv" "https://rss.arxiv.org/rss/q-fin")
          ("Stat arXiv" "https://rss.arxiv.org/rss/stat")
          ("CS arXiv" "https://rss.arxiv.org/rss/cs")))
#+end_src
** END

* fingertip
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-fingertip.el
:END:

#+begin_src emacs-lisp
  (require 'fingertip)

  (dolist (hook (list
                 'bash-ts-mode-hook
                 'c++-mode-hook
                 'c++-ts-mode-hook
                 'c-mode-common-hook
                 'c-mode-hook
                 'c-ts-mode-hook
                 'cmake-ts-mode-hook
                 'coffee-mode-hook
                 'conf-toml-mode-hook
                 'css-mode-hook
                 'css-ts-mode-hook
                 'emacs-lisp-mode-hook
                 'go-mode-hook
                 'haskell-mode-hook
                 'ielm-mode-hook
                 'jade-mode-hook
                 'java-mode-hook
                 'js-mode-hook
                 'js-ts-mode-hook
                 'json-ts-mode-hook
                 'kotlin-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'llvm-mode-hook
                 'lua-mode-hook
                 'makefile-gmake-mode-hook
                 'markdown-ts-mode-hook
                 'maxima-mode-hook
                 'mojo-mode-hook
                 'nim-mode-hook
                 'php-mode-hook
                 'php-ts-mode-hook
                 'python-mode-hook
                 'python-ts-mode-hook
                 'qmake-mode-hook
                 'qml-mode-hook
                 'ruby-mode-hook
                 'rust-mode-hook
                 'rust-ts-mode-hook
                 'sh-mode-hook
                 'swift-mode-hook
                 'toml-ts-mode-hook
                 'typescript-mode-hook
                 'typescript-ts-mode-hook
                 'web-mode-hook
                 'zig-mode-hook
                 'fsharp-mode-hook
                 'clojure-mode-hook
                 'clojure-ts-mode-hook
                 'cider-repl-mode-hook
                 'nix-mode-hook
                 'solidity-mode-hook
                 ))
    (add-hook hook #'(lambda ()
                       (when (or
                              (not (buffer-file-name))
                              (not (string-equal (file-name-extension (buffer-file-name)) "chat")))
                         (fingertip-mode 1)))
              ))

  (define-key fingertip-mode-map (kbd "(") 'fingertip-open-round)
  (define-key fingertip-mode-map (kbd "[") 'fingertip-open-bracket)
  (define-key fingertip-mode-map (kbd "{") 'fingertip-open-curly)
  ;; (define-key fingertip-mode-map (kbd ")") 'fingertip-close-round)
  (define-key fingertip-mode-map (kbd "]") 'fingertip-close-bracket)
  (define-key fingertip-mode-map (kbd "}") 'fingertip-close-curly)
  (define-key fingertip-mode-map (kbd "=") 'fingertip-equal)

  (define-key fingertip-mode-map (kbd "（") 'fingertip-open-chinese-round)
  (define-key fingertip-mode-map (kbd "「") 'fingertip-open-chinese-bracket)
  (define-key fingertip-mode-map (kbd "【") 'fingertip-open-chinese-curly)
  (define-key fingertip-mode-map (kbd "）") 'fingertip-close-chinese-round)
  (define-key fingertip-mode-map (kbd "」") 'fingertip-close-chinese-bracket)
  (define-key fingertip-mode-map (kbd "】") 'fingertip-close-chinese-curly)

  (define-key fingertip-mode-map (kbd "%") 'fingertip-match-paren)
  (define-key fingertip-mode-map (kbd "\"") 'fingertip-double-quote)
  (define-key fingertip-mode-map (kbd "'") 'fingertip-single-quote)

  (define-key fingertip-mode-map (kbd "SPC") 'fingertip-space)
  (define-key fingertip-mode-map (kbd "RET") 'fingertip-newline)

  ;; (define-key fingertip-mode-map (kbd "M-o") 'backward-delete-char)
  ;; (define-key fingertip-mode-map (kbd "M-O") 'backward-kill-word)
  (define-key fingertip-mode-map (kbd "C-k") 'fingertip-kill)

  ;; ???
  (define-key fingertip-mode-map (kbd "M-\"") 'fingertip-wrap-double-quote)
  (define-key fingertip-mode-map (kbd "M-'") 'fingertip-wrap-single-quote)
  (define-key fingertip-mode-map (kbd "M-[") 'fingertip-wrap-bracket)
  (define-key fingertip-mode-map (kbd "M-{") 'fingertip-wrap-curly)
  (define-key fingertip-mode-map (kbd "M-(") 'fingertip-wrap-round)
  (define-key fingertip-mode-map (kbd "M-)") 'fingertip-unwrap)

  ;; (define-key fingertip-mode-map (kbd "M-n") 'fingertip-jump-right)
  ;; (define-key fingertip-mode-map (kbd "M-p") 'fingertip-jump-left)
  (define-key fingertip-mode-map (kbd "C-M-;") 'fingertip-jump-out-pair-and-newline)
  (define-key fingertip-mode-map (kbd "M-p") 'fingertip-jump-up)

  (provide 'init-fingertip)
#+end_src

