#+title: Emacs Configuration
#+startup: overview

* Early-Init
:PROPERTIES:
:HEADER-ARGS: :tangle early-init.el
:END:
** borg initialization
#+begin_src emacs-lisp
;;; early-init.el --- earliest birds               -*- lexical-binding: t -*-

(setq load-prefer-newer t)

(add-to-list 'load-path
             (expand-file-name
              "lib/auto-compile"
              (file-name-directory (or load-file-name buffer-file-name))))
(require 'auto-compile)
(auto-compile-on-load-mode)
(auto-compile-on-save-mode)

(setq package-enable-at-startup nil)

(with-eval-after-load 'package
  (add-to-list 'package-archives
               (cons "melpa" "https://melpa.org/packages/")
               t))


#+end_src


** Personal
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
  (setq gc-cons-percentage 0.6)
  (setq package-enable-at-startup nil)
  (setq package-quickstart nil)

  (setq frame-inhibit-implied-resize t)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
  (setq use-file-dialog nil)


#+end_src

** END
#+begin_src emacs-lisp
  (provide 'early-init)

  ;; Local Variables:
  ;; no-byte-compile: t
  ;; indent-tabs-mode: nil
  ;; End:
  ;;; early-init.el ends here
#+end_src


* Init
:PROPERTIES:
:HEADER-ARGS: :tangle init.el
:END:

** start
#+begin_src emacs-lisp
  ;;; init.el --- user-init-file                    -*- lexical-binding: t -*-
  ;;; Early birds
  
#+end_src

** borg
#+begin_src emacs-lisp
  (progn ;     startup
    (defvar before-user-init-time (current-time)
      "Value of `current-time' when Emacs begins loading `user-init-file'.")
    (message "Loading Emacs...done (%.3fs)"
             (float-time (time-subtract before-user-init-time
                                        before-init-time)))
    (setq user-init-file (or load-file-name buffer-file-name))
    (setq user-emacs-directory (file-name-directory user-init-file))
    (message "Loading %s..." user-init-file)
    (when (< emacs-major-version 27)
      (setq package-enable-at-startup nil)
      ;; (package-initialize)
      (load-file (expand-file-name "early-init.el" user-emacs-directory)))
    (setq inhibit-startup-buffer-menu t)
    (setq inhibit-startup-screen t)
    (setq inhibit-startup-echo-area-message "locutus")
    (setq initial-buffer-choice t)
    (setq initial-scratch-message "")
    (when (fboundp 'scroll-bar-mode)
      (scroll-bar-mode 0))
    (when (fboundp 'tool-bar-mode)
      (tool-bar-mode 0))
    (menu-bar-mode 0))

  (eval-and-compile ; `borg'
    (add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
    (require 'borg)
    (borg-initialize))

  (eval-and-compile ; `use-package'
    (setopt use-package-enable-imenu-support t)
    (setopt use-package-verbose t)
    (require 'use-package))

  (use-package compat)

  (use-package dash
    :config (global-dash-fontify-mode))

  (use-package eieio)

  (use-package auto-compile
    :config
    (setq auto-compile-display-buffer               nil)
    (setq auto-compile-mode-line-counter            t)
    (setq auto-compile-source-recreate-deletes-dest t)
    (setq auto-compile-toggle-deletes-nonlib-dest   t)
    (setq auto-compile-update-autoloads             t))

  (use-package epkg
    :defer t
    :init
    (setq epkg-repository
          (expand-file-name "var/epkgs/" user-emacs-directory))
    (setq epkg-database-connector
          (if (>= emacs-major-version 29) 'sqlite-builtin 'sqlite-module)))

  (use-package custom
    :no-require t
    :config
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
      (load custom-file)))

  (use-package server
    :functions (server-running-p)
    :config (or (server-running-p) (server-mode)))

  (progn ;     startup
    (message "Loading early birds...done (%.3fs)"
             (float-time (time-subtract (current-time)
                                        before-user-init-time))))

  ;;; Long tail

  (use-package diff-hl
    :config
    (setq diff-hl-draw-borders nil)
    (global-diff-hl-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh t))

  (use-package diff-mode
    :defer t
    :config
    (when (>= emacs-major-version 27)
      (set-face-attribute 'diff-refine-changed nil :extend t)
      (set-face-attribute 'diff-refine-removed nil :extend t)
      (set-face-attribute 'diff-refine-added   nil :extend t)))

  (use-package dired
    :defer t
    :config (setq dired-listing-switches "-alh"))

  (use-package eldoc
    :when (version< "25" emacs-version)
    :config (global-eldoc-mode))

  (use-package help
    :defer t
    :config (temp-buffer-resize-mode))

  (progn ;    `isearch'
    (setq isearch-allow-scroll t))

  (use-package lisp-mode
    :config
    (add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
    (add-hook 'emacs-lisp-mode-hook 'reveal-mode)
    (defun indent-spaces-mode ()
      (setq indent-tabs-mode nil))
    (add-hook 'lisp-interaction-mode-hook 'indent-spaces-mode))

  (use-package magit
    :defer t
    :commands (magit-add-section-hook)
    :config
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules
                            'magit-insert-stashes
                            'append))

  (use-package man
    :defer t
    :config (setq Man-width 80))

  (use-package paren
    :config (show-paren-mode))

  (use-package prog-mode
    :config (global-prettify-symbols-mode)
    (defun indicate-buffer-boundaries-left ()
      (setq indicate-buffer-boundaries 'left))
    (add-hook 'prog-mode-hook 'indicate-buffer-boundaries-left))

  (use-package recentf
    :demand t
    :config (add-to-list 'recentf-exclude "^/\\(?:ssh\\|su\\|sudo\\)?x?:"))

  (use-package savehist
    :config (savehist-mode))

  (use-package saveplace
    :when (version< "25" emacs-version)
    :config (save-place-mode))

  (use-package simple
    :config (column-number-mode))

  (use-package smerge-mode
    :defer t
    :config
    (when (>= emacs-major-version 27)
      (set-face-attribute 'smerge-refined-removed nil :extend t)
      (set-face-attribute 'smerge-refined-added   nil :extend t)))

  (progn ;    `text-mode'
    (add-hook 'text-mode-hook 'indicate-buffer-boundaries-left))

  (use-package tramp
    :defer t
    :config
    (add-to-list 'tramp-default-proxies-alist '(nil "\\`root\\'" "/ssh:%h:"))
    (add-to-list 'tramp-default-proxies-alist '("localhost" nil nil))
    (add-to-list 'tramp-default-proxies-alist
                 (list (regexp-quote (system-name)) nil nil))
    (setq vc-ignore-dir-regexp
          (format "\\(%s\\)\\|\\(%s\\)"
                  vc-ignore-dir-regexp
                  tramp-file-name-regexp)))

  (use-package tramp-sh
    :defer t
    :config (cl-pushnew 'tramp-own-remote-path tramp-remote-path))

  ;;; Tequila worms

  (progn ;     startup
    (message "Loading %s...done (%.3fs)" user-init-file
             (float-time (time-subtract (current-time)
                                        before-user-init-time)))
    (add-hook 'after-init-hook
              (lambda ()
                (message
                 "Loading %s...done (%.3fs) [after-init]" user-init-file
                 (float-time (time-subtract (current-time)
                                            before-user-init-time))))
              t))

  (progn ;     personalize
    (let ((file (expand-file-name (concat (user-real-login-name) ".el")
                                  user-emacs-directory)))
      (when (file-exists-p file)
        (load file))))

#+end_src

** Require
#+begin_src emacs-lisp
  ;; garbage collection
  (setq gc-cons-threshold (* 128 1024 1024))

  ;; ??? Process performance tuning
  (setq read-process-output-max (* 4 1024 1024))
  (setq process-adaptive-read-buffering nil)

  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  ;; add you personal config
  ;; (dolist (dir '("lisp"))
  ;;   (push (expand-file-name dir user-emacs-directory) load-path))
  ;; add the subdirectory
  ;; (dolist (dir '("site-lisp" "test-lisp"))
  ;;   (let ((default-directory (expand-file-name dir user-emacs-directory)))
  ;;     (normal-top-level-add-subdirs-to-load-path))) ;;how this work


  ;; Now we only need many require command
  ;;  (require 'init-base)

  ;; inside
  (require 'init-ui)
  (require 'init-theme)
  (require 'init-org)

  ;; outside
  (require 'init-rime)
  (require 'init-rainbow-delimiters)
  ; (require 'init-auto-save)
  ; (require 'init-which-key)
  ; (require 'init-aweshell)
  (require 'init-ivy)
  ; (require 'init-fingertip)
  ; (require 'init-yasnippet)
  ; (require 'init-lsp-bridge)
  ; (require 'init-avy)
  ; (require 'init-magit)
  ; (require 'init-dirvish)
  ; (require 'init-projectile)
  ; (require 'init-latex)
  ; 
  ; (require 'init-test)

#+end_src

** END
#+begin_src emacs-lisp
  (provide 'init)

  ;; Local Variables:
  ;; indent-tabs-mode: nil
  ;; End:
  ;;; init.el ends here

#+end_src
* Lisp
** ui
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ui.el
:END:
#+begin_src emacs-lisp
  ;; (setq visible-bell t)

  ;; display column number in the modeline
  (column-number-mode)

  ;; display line numbers and disable in some mode
  (global-display-line-numbers-mode t)

  ;; turn of the line numebr in the terminal
  ;; why it is useless
  ;; (dolist (mode '(org-mode-hook
  ;;                 term-mode-hook
  ;;                 shell-mode-hook
  ;;                 eshell-mode-hook))
  ;;   (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (provide 'init-ui)
#+end_src

** theme
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-theme.el
:END:

#+begin_src emacs-lisp
  (load-theme 'modus-operandi-tinted)

  (provide 'init-theme)
#+end_src

** org
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org.el
:END:
*** ui
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
  (setq org-hide-leading-stars t)
  (add-hook 'org-mode-hook 'org-num-mode)

  (with-eval-after-load 'org
    ;; Make verbatim with highlight text background.
    (add-to-list 'org-emphasis-alist
                 '("=" (:background "#ffee11")))
    ;; Make deletion (obsolete) text foreground with dark gray.
    (add-to-list 'org-emphasis-alist
                 '("+" (:foreground "dark gray"
                       :strike-through t)))
    ;; Make code style around with box.
    (add-to-list 'org-emphasis-alist
                 '("~" (:box (:line-width 2
                               :color "grey75"
                               :style released-button)))))
#+END_SRC

*** agenda
#+begin_src emacs-lisp
  (define-key global-map "\C-ca" 'org-agenda)

  (setq org-agenda-window-setup 'current-window)

  (setq org-directory "~/Documents/org/")
  (setq org-agenda-files '("~/Documents/org/agenda/"))

  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-timestamp-if-done t)

  ;; ??? what is this
  (setq org-agenda-start-with-log-mode t)
#+end_src

*** capture
set the org capture template
#+begin_src emacs-lisp
  (define-key global-map "\C-cc" 'org-capture)

  (setq org-capture-templates nil)

  (add-to-list 'org-capture-templates
  	     '("j" "Journal" entry (file+weektree "~/Documents/org/journal/journal.org")
  	       "* %?"))
  (add-to-list 'org-capture-templates
               '("i" "Inbox" entry (file "~/Documents/org/inbox.org")
                 "* %?\n"))
  (add-to-list 'org-capture-templates
               '("n" "Notes" entry (file "~/Documents/org/notes.org")
                 "* %^{heading} %t %^g\n  %?\n"))
  (add-to-list 'org-capture-templates
  	     '("e" "English Learning" entry
  	       (file+weektree "~/Documents/org/en-learn.org")
  	       "* \n\n** 1\n%?"))
  (add-to-list 'org-capture-templates
  	     '("s" "self-improve" entry
  	       (file+datetree "~/Documents/org/self-improve.org")
  	       "* %?"))
  (add-to-list 'org-capture-templates
  	     '("v" "vlog" entry
  	       (file+weektree "~/Documents/org/record.org")
  	       "* %?")) ;; C-c C-x C-i to start record C-c C-x C-o to end itt
  (add-to-list 'org-capture-templates
  	     '("b" "Blog" entry
  	       (file+datetree "~/Documents/org/blog/blog.org")
  	       "* %?"))
  (add-to-list 'org-capture-templates
  	     '("i" "Ideas" entry
  	       (file "~/Documents/org/ideas.org")
  	       "* %?"))
#+end_src

#+begin_src emacs-lisp
  (provide 'init-org)
#+end_src
*** edit
here is some basic config helping for editing.
#+begin_src emacs-lisp
  (setq org-yank-image-file-name-function 'org-yank-image-read-filename)
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-M-y") 'yank-media)
    (define-key org-mode-map (kbd "C-M-Y") 'yank-media-types))

#+end_src

*** babel
only the language set here can be babeled.
#+begin_src emacs-lisp
  (setq org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (C . t)))
#+end_src
*** appear
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)

  (require 'org-appear)
  (add-hook 'org-mode-hook 'org-appear-mode)
#+end_src
*** olivetti
#+begin_src emacs-lisp
  (require 'olivetti)
  (define-key global-map "\C-co" 'olivetti-mode)
#+end_src
*** END

#+begin_src emacs-lisp
  (provide 'init-org)
#+end_src

** emacs rime
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-rime.el
:END:
#+begin_src emacs-lisp
  (require 'rime)

  ;; (setq rime-posframe-properties
  ;;       (list :background-color "#333333"
  ;;   	  :foreground-color "#dcdcdc"
  ;;   	  :internal-border-width 5))

  (setq rime-user-data-dir "~/.config/rime-moran")
  (setq default-input-method "rime"
        rime-show-candidate 'posframe)

  (setq rime-posframe-style 'vertical)

  (provide 'init-rime)
#+end_src

** rainbow delimiters
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-rainbow-delimiters.el
:END:
#+begin_src emacs-lisp
  (require 'rainbow-delimiters)

  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

  (provide 'init-rainbow-delimiters)
#+end_src

** ivy
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ivy.el
:END:
#+begin_src emacs-lisp

  (require 'ivy)
  (require 'swiper)
  (require 'counsel)
  (ivy-mode)
  (setopt ivy-use-virtual-buffers t)
  (setopt enable-recursive-minibuffers t)
  ;; Enable this if you want `swiper' to use it:
  ;; (setopt search-default-mode #'char-fold-to-regexp)
  (keymap-global-set "C-s" #'swiper-isearch)
  (keymap-global-set "C-c C-r" #'ivy-resume)
  (keymap-global-set "<f6>" #'ivy-resume)
  (keymap-global-set "M-x" #'counsel-M-x)
  (keymap-global-set "C-x C-f" #'counsel-find-file)
  (keymap-global-set "<f1> f" #'counsel-describe-function)
  (keymap-global-set "<f1> v" #'counsel-describe-variable)
  (keymap-global-set "<f1> o" #'counsel-describe-symbol)
  (keymap-global-set "<f1> l" #'counsel-find-library)
  (keymap-global-set "<f2> i" #'counsel-info-lookup-symbol)
  (keymap-global-set "<f2> u" #'counsel-unicode-char)
  (keymap-global-set "C-c g" #'counsel-git)
  (keymap-global-set "C-c j" #'counsel-git-grep)
  (keymap-global-set "C-c k" #'counsel-ag)
  (keymap-global-set "C-x l" #'counsel-locate)
  (keymap-global-set "C-S-o" #'counsel-rhythmbox)
  (keymap-set minibuffer-local-map "C-r" #'counsel-minibuffer-history)

  (provide 'init-ivy)
#+end_src
