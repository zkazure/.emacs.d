#+title: Emacs Configuration
#+startup: show2levels

* Early-Init
:PROPERTIES:
:HEADER-ARGS: :tangle early-init.el
:END:
** borg initialization
#+begin_src emacs-lisp
  ;;; early-init.el --- earliest birds               -*- lexical-binding: t -*-

  (setq load-prefer-newer t)

  (add-to-list 'load-path
               (expand-file-name
                "lib/auto-compile"
                (file-name-directory (or load-file-name buffer-file-name))))
  (require 'auto-compile)
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode)

  (setq package-enable-at-startup nil)

  (with-eval-after-load 'package
    (add-to-list 'package-archives
                 (cons "melpa" "https://melpa.org/packages/")
                 t))


#+end_src


** Personal
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
  (setq gc-cons-percentage 0.6)
  (setq package-enable-at-startup nil)
  (setq package-quickstart nil)

  (setq frame-inhibit-implied-resize t)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
  (setq use-file-dialog nil)


#+end_src

** END
#+begin_src emacs-lisp
  (provide 'early-init)

  ;; Local Variables:
  ;; no-byte-compile: t
  ;; indent-tabs-mode: nil
  ;; End:
  ;;; early-init.el ends here
#+end_src


* Init
:PROPERTIES:
:HEADER-ARGS: :tangle init.el
:END:

** start
#+begin_src emacs-lisp
  ;;; init.el --- user-init-file                    -*- lexical-binding: t -*-
  ;;; Early birds
  
#+end_src

** borg
#+begin_src emacs-lisp
  (progn ;     startup
    (defvar before-user-init-time (current-time)
      "Value of `current-time' when Emacs begins loading `user-init-file'.")
    (message "Loading Emacs...done (%.3fs)"
             (float-time (time-subtract before-user-init-time
                                        before-init-time)))
    (setq user-init-file (or load-file-name buffer-file-name))
    (setq user-emacs-directory (file-name-directory user-init-file))
    (message "Loading %s..." user-init-file)
    (when (< emacs-major-version 27)
      (setq package-enable-at-startup nil)
      ;; (package-initialize)
      (load-file (expand-file-name "early-init.el" user-emacs-directory)))
    (setq inhibit-startup-buffer-menu t)
    (setq inhibit-startup-screen t)
    (setq inhibit-startup-echo-area-message "locutus")
    (setq initial-buffer-choice t)
    (setq initial-scratch-message "")
    (when (fboundp 'scroll-bar-mode)
      (scroll-bar-mode 0))
    (when (fboundp 'tool-bar-mode)
      (tool-bar-mode 0))
    (menu-bar-mode 0))

  (eval-and-compile ; `borg'
    (add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
    (require 'borg)
    (borg-initialize))

  (eval-and-compile ; `use-package'
    (setopt use-package-enable-imenu-support t)
    (setopt use-package-verbose t)
    (require 'use-package))

  (use-package compat)

  (use-package dash
    :config (global-dash-fontify-mode))

  (use-package eieio)

  (use-package auto-compile
    :config
    (setq auto-compile-display-buffer               nil)
    (setq auto-compile-mode-line-counter            t)
    (setq auto-compile-source-recreate-deletes-dest t)
    (setq auto-compile-toggle-deletes-nonlib-dest   t)
    (setq auto-compile-update-autoloads             t))

  (use-package epkg
    :defer t
    :init
    (setq epkg-repository
          (expand-file-name "var/epkgs/" user-emacs-directory))
    (setq epkg-database-connector
          (if (>= emacs-major-version 29) 'sqlite-builtin 'sqlite-module)))

  (use-package custom
    :no-require t
    :config
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
      (load custom-file)))

  (use-package server
    :functions (server-running-p)
    :config (or (server-running-p) (server-mode)))

  (progn ;     startup
    (message "Loading early birds...done (%.3fs)"
             (float-time (time-subtract (current-time)
                                        before-user-init-time))))

  ;;; Long tail

  (use-package diff-hl
    :config
    (setq diff-hl-draw-borders nil)
    (global-diff-hl-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh t))

  (use-package diff-mode
    :defer t
    :config
    (when (>= emacs-major-version 27)
      (set-face-attribute 'diff-refine-changed nil :extend t)
      (set-face-attribute 'diff-refine-removed nil :extend t)
      (set-face-attribute 'diff-refine-added   nil :extend t)))

  (use-package dired
    :defer t
    :config (setq dired-listing-switches "-alh"))

  (use-package eldoc
    :when (version< "25" emacs-version)
    :config (global-eldoc-mode))

  (use-package help
    :defer t
    :config (temp-buffer-resize-mode))

  (progn ;    `isearch'
    (setq isearch-allow-scroll t))

  (use-package lisp-mode
    :config
    (add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
    (add-hook 'emacs-lisp-mode-hook 'reveal-mode)
    (defun indent-spaces-mode ()
      (setq indent-tabs-mode nil))
    (add-hook 'lisp-interaction-mode-hook 'indent-spaces-mode))

  (use-package magit
    :defer t
    :commands (magit-add-section-hook)
    :config
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules
                            'magit-insert-stashes
                            'append))

  (use-package man
    :defer t
    :config (setq Man-width 80))

  (use-package paren
    :config (show-paren-mode))

  (use-package prog-mode
    :config (global-prettify-symbols-mode)
    (defun indicate-buffer-boundaries-left ()
      (setq indicate-buffer-boundaries 'left))
    (add-hook 'prog-mode-hook 'indicate-buffer-boundaries-left))

  (use-package recentf
    :demand t
    :config (add-to-list 'recentf-exclude "^/\\(?:ssh\\|su\\|sudo\\)?x?:"))

  (use-package savehist
    :config (savehist-mode))

  (use-package saveplace
    :when (version< "25" emacs-version)
    :config (save-place-mode))

  (use-package simple
    :config (column-number-mode))

  (use-package smerge-mode
    :defer t
    :config
    (when (>= emacs-major-version 27)
      (set-face-attribute 'smerge-refined-removed nil :extend t)
      (set-face-attribute 'smerge-refined-added   nil :extend t)))

  (progn ;    `text-mode'
    (add-hook 'text-mode-hook 'indicate-buffer-boundaries-left))

  (use-package tramp
    :defer t
    :config
    (add-to-list 'tramp-default-proxies-alist '(nil "\\`root\\'" "/ssh:%h:"))
    (add-to-list 'tramp-default-proxies-alist '("localhost" nil nil))
    (add-to-list 'tramp-default-proxies-alist
                 (list (regexp-quote (system-name)) nil nil))
    (setq vc-ignore-dir-regexp
          (format "\\(%s\\)\\|\\(%s\\)"
                  vc-ignore-dir-regexp
                  tramp-file-name-regexp)))

  (use-package tramp-sh
    :defer t
    :config (cl-pushnew 'tramp-own-remote-path tramp-remote-path))

  ;;; Tequila worms

  (progn ;     startup
    (message "Loading %s...done (%.3fs)" user-init-file
             (float-time (time-subtract (current-time)
                                        before-user-init-time)))
    (add-hook 'after-init-hook
              (lambda ()
                (message
                 "Loading %s...done (%.3fs) [after-init]" user-init-file
                 (float-time (time-subtract (current-time)
                                            before-user-init-time))))
              t))

  (progn ;     personalize
    (let ((file (expand-file-name (concat (user-real-login-name) ".el")
                                  user-emacs-directory)))
      (when (file-exists-p file)
        (load file))))

#+end_src

** Require
#+begin_src emacs-lisp
  ;; garbage collection
  (setq gc-cons-threshold (* 128 1024 1024))

  ;; ??? Process performance tuning
  (setq read-process-output-max (* 4 1024 1024))
  (setq process-adaptive-read-buffering nil)

  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  ;; add you personal config
  ;; (dolist (dir '("lisp"))
  ;;   (push (expand-file-name dir user-emacs-directory) load-path))
  ;; add the subdirectory
  ;; (dolist (dir '("site-lisp" "test-lisp"))
  ;;   (let ((default-directory (expand-file-name dir user-emacs-directory)))
  ;;     (normal-top-level-add-subdirs-to-load-path))) ;;how this work


  ;; Now we only need many require command
  ;;  (require 'init-base)

  ;; inside
  (require 'init-ui)
  (require 'init-theme)
  (require 'init-org)

  ;; outside
  (require 'init-rime)
  (require 'init-rainbow-delimiters)
  (require 'init-which-key)
  (require 'init-ivy)
  (require 'init-yasnippet)
  (require 'init-lsp-bridge)
  (require 'init-avy)
  (require 'init-dirvish)
  (require 'init-projectile)
  (require 'init-latex)

  (require 'init-emacs-everywhere)
  (require 'init-markdown-mode)
  (require 'init-jinx)
  (require 'init-orderless)
  (require 'init-font)
  (require 'init-visual-regexp)
  (require 'init-plantuml-mode)
  (require 'init-org-roam)
  (require 'init-pdf-tools)
  (require 'init-org-noter)
  (require 'init-super-save)
  (require 'init-indent)
  ;; (require 'init-electric-pair-mode)
  (require 'init-fingertip)
  ;; (require 'init-modeline)
  (require 'init-tab-bar)

  (require 'init-csv-mode)
  (require 'init-org-download)
  (require 'init-emmet-mode)
  (require 'init-web-mode)
  (require 'init-vterm)
  (require 'init-org-roam-ui)
  (require 'init-treesit)
  (require 'init-treesit-fold)
  (require 'init-yaml-mode)
  (require 'init-citar)
  (require 'init-ivy-posframe)
  (require 'init-ox-hugo)
  (require 'init-quickrun)
  (require 'init-org-fragtog)
  (require 'init-hydra)
  (require 'init-sudo-edit)
  (require 'init-neotree)
  (require 'init-leetcode)
  (require 'init-move-text)
  (require 'init-tag)

  (require 'init-personal)
  (require 'init-test)

#+end_src

** END
#+begin_src emacs-lisp
  (provide 'init)

  ;; Local Variables:
  ;; indent-tabs-mode: nil
  ;; End:
  ;;; init.el ends here

#+end_src
* Lisp
** ui
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ui.el
:END:
#+begin_src emacs-lisp
  ;; (setq visible-bell t)

  ;; display column number in the modeline
  (column-number-mode)

  ;; display line numbers and disable in some mode
  (global-display-line-numbers-mode t)
  ;; (setq-default display-line-numbers-width 4)
  (global-visual-line-mode t)  

  (dolist (mode '(org-mode-hook
                  vterm-mode-hook
                  dired-mode-hook
                  markdown-mode-hook
                  lisp-interaction-mode-hook
                  org-agenda-mode-hook
                  ibuffer-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode -1))))


  (setq next-screen-context-lines 15)

  (setq enable-recursive-minibuffers +1)
  (setq cursor-in-non-selected-windows nil)

  ;; ibuffer
  (global-set-key (kbd "C-x C-b") 'ibuffer-other-window)
  (setq ibuffer-show-empty-filter-groups t)
  (setq ibuffer-saved-filter-groups
        `(("default"
           ("mail" (or
                    (mode . message-mode)
                    (mode . notmuch-hello-mode)
                    (mode . notmuch-search-mode)
                    (mode . notmuch-message-mode)
                    (mode . notmuch-show-mode)
                    (mode . notmuch-tree-mode)
                    (mode . bbdb-mode)
                    (mode . mail-mode)
                    (mode . mu4e-main-mode)
                    (mode . gnus-group-mode)
                    (mode . gnus-summary-mode)
                    (mode . gnus-article-mode)
                    (name . "^\\..bdb$")))
           ("org" (or
                   (mode . org-agenda-mode)
                   (mode . diary-mode)
                   (name . "^\\*Calendar\\*$")
                   (name . "^diary$")
                   (filename . "Pending/org/")))
           ("dired" (mode . dired-mode))
           ("emacs" (or
                     (name . "^\\*package.*results\\*$")
                     (name . "^\\*Shell.*Output\\*$")
                     (name . "^\\*Compile-Log\\*$")
                     (name . "^\\*Completions\\*$")
                     (name . "^\\*Backtrace\\*$")
                     (name . "^\\*dashboard\\*$")
                     (name . "^\\*Messages\\*$")
                     (name . "^\\*scratch\\*$")
                     (name . "^\\*Appointment Alert\\*$")
                     (name . "^\\*info\\*$")
                     (name . "^\\*Help\\*$")))
           )))
  (defun ct/ibuffer-enable-saved-filter-groups ()
    (ibuffer-switch-to-saved-filter-groups "default"))

  (add-hook 'ibuffer-mode-hook #'ct/ibuffer-enable-saved-filter-groups)
  (setq ibuffer-formats
        '((mark modified read-only locked " "
    	          (name 20 20 :left :elide)
    	          " "
    	          (mode 16 16 :left :elide)
    	          " "
    	          filename-and-process)
    	    (mark " "
    	          (name 16 -1)
    	          " " filename)))

  ;; other
  (save-place-mode 1)
  (setq fill-column 80)
  (setq y-or-n-p-as-yes-or-no nil)

  (setq system-time-locale "en_US.utf8")

  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment   'utf-8)

  (provide 'init-ui)
#+end_src

** theme
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-theme.el
:END:

#+begin_src emacs-lisp
  (load-theme 'modus-operandi-tinted)

  (provide 'init-theme)
#+end_src

** org
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org.el
:END:
*** ui
#+BEGIN_SRC emacs-lisp
  (require 'org)

  (setq-default line-spacing .1)
  (setq org-imenu-depth 4
        org-ellipsis " ┑")

  (setq org-log-into-drawer t)

  (setq org-tags-column -80
        org-catch-invisible-edits 'smart
        org-startup-indented t
        org-hide-leading-stars t)
  (add-hook 'org-mode-hook 'org-num-mode)

  (with-eval-after-load 'org
    ;; Make verbatim with highlight text background.
    (add-to-list 'org-emphasis-alist
                 '("=" (:background "#ffee11")))
    ;; Make deletion (obsolete) text foreground with dark gray.
    (add-to-list 'org-emphasis-alist
                 '("+" (:foreground "dark gray"
                       :strike-through t)))
    ;; Make code style around with box.
    (add-to-list 'org-emphasis-alist
                 '("~" (:box (:line-width 2
                               :color "grey75"
                               :style released-button)))))


  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "DOING(g)" "|" "DONE(d)" "HOLD(h)")
                (sequence "LOOP(l)" "|" "DONE(d)")
                (sequence "PROJECT(p)"))))

  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "red1"  :weight bold))
          ("NEXT" . (:foreground "DeepSkyBlue" :weight bold))
          ("DOING" . (:foreground "DarkOrchid1"  :weight bold))
          ("DONE" . (:foreground "lime green" :weight bold))
          ("HOLD" . (:foreground "snow3" :weight bold))
          ("LOOP" . (:foreground "tomato1"  :weight bold))
          ("PROJECT" . (:foreground "firebrick"  :weight bold))))

  (setq org-use-fast-todo-selection t) ;; C-c C-t KEY

  (define-key org-mode-map (kbd "C-c n o") 'browse-url)
#+END_SRC
*** agenda
#+begin_src emacs-lisp
  (define-key global-map (kbd "C-c a") 'org-agenda)

  (setq org-agenda-span 'week 
        org-agenda-window-setup 'current-window 
        org-tags-column 0
        ;; org-agenda-compact-blocks nil
        )

  ;; ui
 (setq org-agenda-block-separator ?─
        org-agenda-time-grid
        '((daily today require-timed)
          (800 1000 1200 1400 1600 1800 2000)
          " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
        org-agenda-current-time-string
        "⭠ now  ────────")

  (setq org-agenda-custom-commands 
        (quote
         ;; `C-a d` is my main Agenda
         (("d" "Daily Action List"
           (
            (tags "+focus"
                  (
                   (org-tags-match-list-sublevels nil)
                   (org-agenda-todo-ignore-scheduled 'future)))

            (agenda "" ((org-agenda-overriding-header " ") ;; Non-empty string
                        (org-agenda-span 'day)
                        (org-agenda-ndays 1)
                        (org-agenda-sorting-strategy (quote ((agenda time-up priority-down tag-up))))

                        ;; Do not include scheduled, due or overdue items here
                        (org-deadline-warning-days 0)
                        (org-scheduled-past-days 0)
                        (org-deadline-past-days 0)

                        (org-agenda-skip-scheduled-if-done t)
                        (org-agenda-skip-timestamp-if-done t)
                        (org-agenda-skip-deadline-if-done t)))

            (agenda "" ((org-agenda-overriding-header "\nNext three days\n")
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-start-day "+1d")
                        (org-agenda-span 3)
                        (org-deadline-warning-days 0)
                        (org-agenda-block-separator nil)
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))))

            (agenda "" ((org-agenda-overriding-header "\nOverdue")
                        (org-agenda-time-grid nil)
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-show-all-dates nil)
                        (org-agenda-format-date "")  ;; Skip the date
                        (org-agenda-span 1)
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                        (org-agenda-entry-types '(:deadline :scheduled))
                        (org-scheduled-past-days 999)
                        (org-deadline-past-days 999)
                        (org-deadline-warning-days 0)))

            (agenda "" ((org-agenda-overriding-header "\nUpcoming deadlines (+14d)\n")
                        (org-agenda-time-grid nil)
                        (org-agenda-start-on-weekday nil)
                        ;; We don't want to replicate the previous section's
                        ;; three days, so we start counting from the day after.
                        (org-agenda-start-day "+3d")
                        (org-agenda-span 14)
                        (org-agenda-show-all-dates nil)
                        (org-agenda-time-grid nil)
                        (org-deadline-warning-days 0)
                        (org-agenda-block-separator nil)
                        (org-agenda-entry-types '(:deadline))
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))))
            
            )))))


  ;; (setq org-agenda-custom-commands
  ;;       '(("A" "Agenda and All todos"
  ;;          ((agenda "" ((org-agenda-span 'week)))
  ;;           (alltodo "")))
  ;;         ))

  (setq org-directory "~/Documents/org/")
  (setq org-agenda-files '("~/Documents/org/agenda.org"))

  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-timestamp-if-done t)

  ;; ??? what is this
  (setq org-agenda-start-with-log-mode t)



  ;; (defun ct/display-buffer-org-agenda-managed-p (buffer-name action)
  ;;   "Determine whether BUFFER-NAME is an org-agenda managed buffer."
  ;;   (with-current-buffer buffer-name
  ;;     (and (derived-mode-p 'org-mode)
  ;;          (member (buffer-file-name) (org-agenda-files)))))

  ;; (add-to-list 'display-buffer-alist
  ;;              `("\\*Org Agenda\\*"
  ;;                (display-buffer-in-tab display-buffer-reuse-mode-window)
  ;;                (ignore-current-tab . t)
  ;;                (tab-name . "Org Files")
  ;;                (window-width . ,ct/org-agenda-width)
  ;;                (dedicated . side)  ;; Make the Agenda a dedicated side-window
  ;;                (side . left)       ;; to the left so it always stays open.
  ;;                (inhibit-same-window . nil)))
  ;; (add-to-list 'display-buffer-alist
  ;;              '(ct/display-buffer-org-agenda-managed-p
  ;;                (display-buffer-reuse-mode-window  ;; Prioritize reuse of current window
  ;;                 display-buffer-in-tab)            ;; over switching to the Org tab.
  ;;                ;; (ignore-current-tab . t)
  ;;                (tab-name . "Org Files")))

  (add-hook 'emacs-startup-hook
            (lambda ()
              (org-agenda nil "d")))
#+end_src

*** capture
set the org capture template
#+begin_src emacs-lisp
  (define-key global-map (kbd "C-c n c") 'org-capture)

  (setq org-capture-templates nil)

  (add-to-list 'org-capture-templates
               '("i" "Inbox" entry (file "~/Documents/roam/inbox.org")
                 "* %^{title} \n %?\n"))

  ;; (add-to-list 'org-capture-templates '("b" "Blog"))

  ;; (add-to-list 'org-capture-templates
  ;;              '("bi" "Inbox" entry
  ;;                (file+headline "~/Documents/roam/blog/inbox.org")
  ;;                "* TODO %^{任务名}\n%u\n%a\n"))

  ;; (add-to-list 'org-capture-templates
  ;;              '("d" "Diary" entry
  ;;                 (file+olp+datetree "~/Documents/roam/blog/diary.org")
  ;;                 "* %^{title}\n:PROPERTIES:\n:EXPORT_FILE_NAME: %d_%^{title}\n:END:\n"))
#+end_src

*** babel
only the language set here can be babeled.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     (seq-filter
      (lambda (pair)
        (locate-library (concat "ob-" (symbol-name (car pair)))))
      '((emacs-lisp . t)
        (plantuml . t)
        (python . t)
        (shell . t)
        (C . t)
        (javascript . t)
        ))))

  (with-eval-after-load 'org
    (add-to-list 'org-src-lang-modes '("javascript" . js-ts) )
    (add-to-list 'org-src-lang-modes '("cpp" . c++-ts) )
    (add-to-list 'org-src-lang-modes '("C" . c-ts) )
    (add-to-list 'org-src-lang-modes '("sh" . bash-ts) )
    (add-to-list 'org-src-lang-modes '("python" . python-ts) )
    (add-to-list 'org-src-lang-modes '("css" . css-ts))
    (add-to-list 'org-src-lang-modes '("yaml" . yaml-ts))
    (add-to-list 'org-src-lang-modes '("java" . java-ts))
    (add-to-list 'org-src-lang-modes '("json" . json-ts)))

  (with-eval-after-load 'org
    (add-to-list 'org-babel-default-header-args:python
                 '(:results . "output")))

  (setq org-confirm-babel-evaluate nil)

  ;; for python
  (setq org-babel-python-command "python3")


  (add-hook 'org-babel-after-execute
            (lambda ()
              (when (eq major-mode 'org-mode)
                (org-redisplay-inline-images))))
#+end_src

*** appear
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
  (setq org-appear-autolinks t)
  (setq org-appear-autosubmarkers t)
  (setq org-appear-autoentities t)
  (setq org-appear-autokeywords t)

  (require 'org-appear)
  (add-hook 'org-mode-hook 'org-appear-mode)

#+end_src
*** olivetti
#+begin_src emacs-lisp
  (require 'olivetti)
  (define-key global-map "\C-co" 'olivetti-mode)
#+end_src
*** latex

**** highlight
#+begin_src emacs-lisp
  (setq org-highlight-latex-and-related '(native latex entities)) ;; LaTeX 语法高亮设置
  (setq org-pretty-entities t) ;; LaTeX 代码的 prettify
  (setq org-pretty-entities-include-sub-superscripts nil) ;; 不隐藏 LaTeX 的上下标更容易编辑
#+end_src

**** hotkey

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-cdlatex-mode)

  ;; org-cdlatex-mode 中使用 cdlatex 的自动匹配括号, 并把 $...$ 换成 \( ... \)
  (defun my/insert-inline-parentheses ()
    (interactive)
    (insert "\\( ") ;; 把 "\\(" 和 "\\)" 替换成 "$" 就能实现输入成对 "$" 的功能.
    (save-excursion (insert " \\)" )))

  (defun my/insert-square-bra-OCDL ()
    (interactive)
    (insert "\\[ ")
    (save-excursion (insert " \\]" )))

  (defun my/insert-inline-braces ()
    (interactive)
    (insert "\\{ ")
    (save-excursion (insert " \\}" )))

  (define-key org-cdlatex-mode-map (kbd "C-M-9") 'my/insert-inline-parentheses)
  (define-key org-cdlatex-mode-map (kbd "C-M-[") 'my/insert-square-bra-OCDL)
  (define-key org-cdlatex-mode-map (kbd "C-M-{") 'my/insert-inline-braces)  
#+end_src

**** preview
#+begin_src emacs-lisp
  ;; preview with C-c C-x C-l

  (setq my/latex-preview-scale 1.8) ;; 一般来说这里的 scale 约等于 set-face-attribute 中的 :height /100
  (setq org-format-latex-options
        `(:foreground default :background default :scale ,my/latex-preview-scale :html-foreground "Black" :html-background "Transparent" :html-scale ,my/latex-preview-scale :matchers ("begin" "$1" "$" "$$" "\\(" "\\["))) ;; 增大公式预览的图片大小
#+end_src

*** END

#+begin_src emacs-lisp
  (provide 'init-org)
#+end_src

** emacs rime
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-rime.el
:END:
#+begin_src emacs-lisp
  (require 'rime)

  ;; (setq rime-posframe-properties
  ;;       (list :background-color "#333333"
  ;;   	  :foreground-color "#dcdcdc"
  ;;   	  :internal-border-width 5))

  (setq rime-user-data-dir "~/.config/rime-pro")
  (setq default-input-method "rime")
  ;; (setq default-input-method "rime"
  ;;       rime-show-candidate 'posframe)
  ;; (setq rime-posframe-style 'vertical)

  (provide 'init-rime)
#+end_src

** rainbow delimiters
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-rainbow-delimiters.el
:END:
#+begin_src emacs-lisp
  (require 'rainbow-delimiters)

  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

  (provide 'init-rainbow-delimiters)
#+end_src

** which key
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-which-key.el
:END:
#+begin_src emacs-lisp
  (require 'which-key)
  (require 'which-key-posframe)

  (which-key-mode)
  (setq which-key-idle-delay 0.5)

  (which-key-posframe-mode)

  (provide 'init-which-key)
#+end_src

** ivy
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ivy.el
:END:
#+begin_src emacs-lisp

  (require 'ivy)
  (require 'swiper)
  (require 'counsel)
  (ivy-mode)
  (setopt ivy-use-virtual-buffers t)
  (setopt enable-recursive-minibuffers t)
  ;; Enable this if you want `swiper' to use it:
  ;; (setopt search-default-mode #'char-fold-to-regexp)
  (keymap-global-set "C-s" #'swiper-isearch)
  (keymap-global-set "C-c C-r" #'ivy-resume)
  (keymap-global-set "<f6>" #'ivy-resume)
  (keymap-global-set "M-x" #'counsel-M-x)
  (keymap-global-set "C-x C-f" #'counsel-find-file)
  (keymap-global-set "<f1> f" #'counsel-describe-function)
  (keymap-global-set "<f1> v" #'counsel-describe-variable)
  (keymap-global-set "<f1> o" #'counsel-describe-symbol)
  (keymap-global-set "<f1> l" #'counsel-find-library)
  (keymap-global-set "<f2> i" #'counsel-info-lookup-symbol)
  (keymap-global-set "<f2> u" #'counsel-unicode-char)
  (keymap-global-set "C-c g" #'counsel-git)
  (keymap-global-set "C-c j" #'counsel-git-grep)
  (keymap-global-set "C-c v" #'counsel-ag)
  (keymap-global-set "C-x l" #'counsel-locate)
  (keymap-global-set "C-S-o" #'counsel-rhythmbox)
  (keymap-global-set "M-y" #'counsel-yank-pop)
  (keymap-set minibuffer-local-map "C-r" #'counsel-minibuffer-history)

  (provide 'init-ivy)
#+end_src

** yasnippet
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-yasnippet.el
:END:
#+begin_src emacs-lisp
  (require 'yasnippet)

  (yas-global-mode 1)

  (provide 'init-yasnippet)
#+end_src

** avy
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-avy.el
:END:
jump to everywhere quickly
#+begin_src emacs-lisp
  (require 'avy)

  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-,") nil))

  (global-set-key (kbd "C-,") 'avy-goto-char-2)
  (global-set-key (kbd "C-.") 'avy-goto-char)
  (global-set-key (kbd "M-g f") 'avy-goto-line)
  (global-set-key (kbd "M-g w") 'avy-goto-word-1)
  (global-set-key (kbd "M-g e") 'avy-goto-word-0)

  (avy-setup-default)
  (global-set-key (kbd "C-c C-j") 'avy-resume)

  (setq avy-all-windows nil)
  (provide 'init-avy)
#+end_src
** dirvish
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-dirvish.el
:END:
#+begin_src emacs-lisp
  (require 'dirvish)
  (define-key global-map "\C-xd" 'dirvish)
  (define-key dired-mode-map (kbd "b") 'dired-up-directory)

  (provide 'init-dirvish)
#+end_src

** projectile
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-projectile.el
:END:
#+begin_src emacs-lisp
  (require 'projectile)

  (projectile-mode +1)
  ;; Recommended keymap prefix on Windows/Linux
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

  (provide 'init-projectile)
#+end_src

** LaTex
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-latex.el
:END:
*** auctex
#+begin_src emacs-lisp
  (require 'auctex)

  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master t)
#+end_src
*** prettify-symbols-mode
#+begin_src emacs-lisp
  (add-hook 'latex-mode-hook 'prettify-symbols-mode)

  ;; use C-c C-p C-p to preview
  (add-hook 'latex-mode-hook
            (defun preview-larger-previews ()
              (setq preview-scale-function
                    (lambda () (* 1.25
                             (funcall (preview-scale-from-face)))))))

  (setq prettify-symbols-unprettify-at-point t)
#+end_src
*** Tex-fold-mode
#+begin_src emacs-lisp
  (setq TeX-fold-section t)
  (setq TeX-fold-comment t)
  
  (add-hook 'latex-mode-hook 'TeX-fold-mode)
#+end_src

*** cdlatex

#+begin_src emacs-lisp
  (require 'cdlatex)

  (add-hook 'latex-mode-hook 'turn-on-cdlatex)
#+end_src
*** yasnippet

[[https://karthinks.com/software/latex-input-for-impatient-scholars/][Crazy auto cdlatex]]

#+begin_src emacs-lisp
  (defun my/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode)
  	     yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand))))

  ;; Try after every insertion
  (add-hook 'post-self-insert-hook #'my/yas-try-expanding-auto-snippets)
#+end_src
*** Calc
#+begin_src emacs-lisp

  (eval-after-load 'latex
    '(progn
       (define-key LaTeX-mode-map (kbd "C-S-e") 'latex-math-from-calc)))
  (eval-after-load 'org
    '(progn
       (define-key org-mode-map (kbd "C-S-e") 'latex-math-from-calc)))

  (defun latex-math-from-calc ()
    "Evaluate `calc' on the contents of line at point."
    (interactive)
    (cond ((region-active-p)
           (let* ((beg (region-beginning))
                  (end (region-end))
                  (string (buffer-substring-no-properties beg end)))
             (kill-region beg end)
             (insert (calc-eval `(,string calc-language latex
                                          calc-prefer-frac t
                                          calc-angle-mode rad)))))
          (t (let ((l (thing-at-point 'line)))
               (end-of-line 1) (kill-line 0)
               (insert (calc-eval `(,l
                                    calc-language latex
                                    calc-prefer-frac t
                                    calc-angle-mode rad)))))))
#+end_src
*** table
#+begin_src emacs-lisp 
  (require 'org-table)
  (require 'cdlatex)

  ;; 绑定 orgtbl-mode-map 中的 <tab> 和 TAB 键
  (eval-after-load 'org-table
    '(progn
       (define-key orgtbl-mode-map (kbd "<tab>") #'lazytab-org-table-next-field-maybe)
       (define-key orgtbl-mode-map (kbd "TAB") #'lazytab-org-table-next-field-maybe)))

  ;; 添加 cdlatex-tab-hook
  (add-hook 'cdlatex-tab-hook 'lazytab-cdlatex-or-orgtbl-next-field 90)

  ;; 定义 cdlatex 命令
  (add-to-list 'cdlatex-command-alist '("smat" "Insert smallmatrix env"
                                         "\\left( \\begin{smallmatrix} ? \\end{smallmatrix} \\right)"
                                         #'lazytab-position-cursor-and-edit
                                         nil nil t))
  (add-to-list 'cdlatex-command-alist '("bmat" "Insert bmatrix env"
                                         "\\begin{bmatrix} ? \\end{bmatrix}"
                                         #'lazytab-position-cursor-and-edit
                                         nil nil t))
  (add-to-list 'cdlatex-command-alist '("pmat" "Insert pmatrix env"
                                         "\\begin{pmatrix} ? \\end{pmatrix}"
                                         #'lazytab-position-cursor-and-edit
                                         nil nil t))
  (add-to-list 'cdlatex-command-alist '("tbl" "Insert table"
                                         "\\begin{table}\n\\centering ? \\caption{}\n\\end{table}\n"
                                         #'lazytab-position-cursor-and-edit
                                         nil t nil))

  ;; 定义函数
  (defun lazytab-position-cursor-and-edit ()
    "Positions the cursor after inserting a cdlatex template and calls orgtbl-edit."
    (cdlatex-position-cursor)
    (lazytab-orgtbl-edit))

  (defun lazytab-orgtbl-edit ()
    "Enters org-table mode for editing, and prepares for replacement upon exit."
    (advice-add 'orgtbl-ctrl-c-ctrl-c :after #'lazytab-orgtbl-replace)
    (orgtbl-mode 1)
    (open-line 1)
    (insert "\n|"))

  (defun lazytab-orgtbl-replace (&rest _)
    "Replaces the org-table with its LaTeX/amsmath equivalent."
    (interactive "P")
    (unless (org-at-table-p) (user-error "Not at a table"))
    (let* ((table (org-table-to-lisp))
           params
           (replacement-table
            (if (texmathp)
                (lazytab-orgtbl-to-amsmath table params)
              (orgtbl-to-latex table params))))
      (kill-region (org-table-begin) (org-table-end))
      (open-line 1)
      (push-mark)
      (insert replacement-table)
      (align-regexp (region-beginning) (region-end) "\\([:space:]*\\)& ")
      (orgtbl-mode -1)
      (advice-remove 'orgtbl-ctrl-c-ctrl-c #'lazytab-orgtbl-replace)))

  (defun lazytab-orgtbl-to-amsmath (table params)
    "Converts an org-table to amsmath format."
    (orgtbl-to-generic
     table
     (org-combine-plists
      '(:splice t
        :lstart ""
        :lend " \\\\"
        :sep " & "
        :hline nil
        :llend "")
      params)))

  (defun lazytab-cdlatex-or-orgtbl-next-field ()
    "Moves to the next field in org-table if applicable, otherwise lets cdlatex handle it."
    (when (and (bound-and-true-p orgtbl-mode)
               (org-table-p)
               (looking-at "[[:space:]]*\\(?:|\\|$\\)")
               (let ((s (thing-at-point 'sexp)))
                 (not (and s (assoc s cdlatex-command-alist-comb)))))
      (call-interactively #'org-table-next-field)
      t))

  (defun lazytab-org-table-next-field-maybe ()
    "If cdlatex-mode is active, calls cdlatex-tab, otherwise org-table-next-field."
    (interactive)
    (if (bound-and-true-p cdlatex-mode)
        (cdlatex-tab)
      (org-table-next-field)))
#+end_src

*** reftex
#+begin_src emacs-lisp
  (add-hook 'latex-mode-hook 'turn-on-reftex)
#+end_src
*** pdf-tools
#+begin_src emacs-lisp
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))) ;; 用pdf-tools 打开 pdf
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer) ;; 在完成编译后刷新 pdf 文件
#+end_src

*** END
#+begin_src emacs-lisp
  (provide 'init-latex)
#+end_src

** everywhere
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-emacs-everywhere.el
:END:
- [ ] usability test
- [ ] how to remove the file store in the ~/tmp~

#+begin_src emacs-lisp
  (require 'emacs-everywhere)

  (add-hook 'emacs-everywhere-mode-hook 'toggle-input-method)
  
  (provide 'init-emacs-everywhere)
#+end_src

** markdowm mode
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-markdown-mode.el
:END:

#+begin_src emacs-lisp
  (autoload 'markdown-mode "markdown-mode"
     "Major mode for editing Markdown files" t)
  (add-to-list 'auto-mode-alist
               '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))

  (autoload 'gfm-mode "markdown-mode"
     "Major mode for editing GitHub Flavored Markdown files" t)
  (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

  (with-eval-after-load 'markdown-mode
    (define-key markdown-mode-map (kbd "C-c C-e") #'markdown-do))

  (provide 'init-markdown-mode)
#+end_src

** jinx
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-jinx.el
:END:
- [X] ignore Chinese
- [ ] ignore the code in the emphasis.
#+begin_src emacs-lisp
  (require 'jinx)

  (add-hook 'emacs-startup-hook #'global-jinx-mode)
  (add-to-list 'jinx-exclude-regexps '(t "\\cc")) ; 拼写检查忽略中文

  (provide 'init-jinx)
#+end_src

** orderless
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-orderless.el
:END:

#+begin_src emacs-lisp
  (require 'orderless)

  (setq completion-styles '(orderless basic)
        completion-category-overrides '((file (styles basic partial-completion))))

  ;; fuzzy match after ~
  (defun flex-if-twiddle (pattern _index _total)
    (when (string-suffix-p "~" pattern)
      `(orderless-flex . ,(substring pattern 0 -1))))

  ;; (defun first-initialism (pattern index _total)
  ;;   (if (= index 0) 'orderless-initialism))

  ;; ! exclude match
  (defun not-if-bang (pattern _index _total)
    (cond
     ((equal "!" pattern)
      #'ignore)
     ((string-prefix-p "!" pattern)
      `(orderless-not . ,(substring pattern 1)))))

  (setq orderless-matching-styles '(orderless-regexp)
        orderless-style-dispatchers '(; first-initialism
                                      flex-if-twiddle
                                      not-if-bang))


  (orderless-define-completion-style orderless+initialism
    (orderless-matching-styles '(orderless-initialism
                                 orderless-literal
                                 orderless-regexp)))
  (setq completion-category-overrides
        '((command (styles orderless+initialism))
          (symbol (styles orderless+initialism))
          (variable (styles orderless+initialism))))

  ;; integrate with ivy
  (setq ivy-re-builders-alist '((t . orderless-ivy-re-builder)))
  (add-to-list 'ivy-highlight-functions-alist '(orderless-ivy-re-builder . orderless-ivy-highlight))

  (provide 'init-orderless)
#+end_src

** font
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-font.el
:END:

- [ ] fell it
#+begin_src emacs-lisp
    ;; Set the default font for the Emacs frame.
    ;; This will be your primary monospace font for English text and code.
    ;; Adjust the size as needed.
    (setq initial-frame-alist
          (append (list (cons 'font "Maple Mono NF-11"))
                  initial-frame-alist))
    (setq default-frame-alist
          (append (list (cons 'font "Maple Mono NF-11"))
                  default-frame-alist))

    ;; Optionally, set the font immediately if Emacs is already running with a GUI
    (when (display-graphic-p)
      (set-frame-font "Maple Mono NF-11" t t))

    ;; --- CJK Font Fallback using Fontsets ---
    ;; This is crucial for Chinese character display.
    ;; Emacs uses fontsets to determine which font to use for specific character ranges.
    ;; We tell Emacs to use a specific Chinese font for CJK character sets.

    (when (display-graphic-p)
      (dolist (charset '(kana han cjk-misc bopomofo))
        (set-fontset-font
         (frame-parameter nil 'font) ; Apply to the default fontset of the current frame
         charset
         (font-spec :family "Dream Han Serif CN-extrabold" :size 13) ; Your chosen Chinese font
         nil 'prepend))) ; 'prepend ensures it takes precedence over general fallbacks

    (provide 'init-font)
#+end_src

** visual regexp
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-visual-regexp.el
:END:
- [ ] test

  #+begin_src emacs-lisp
    (require 'visual-regexp)
    (define-key global-map (kbd "C-c r") 'vr/replace)
    (define-key global-map (kbd "C-c q") 'vr/query-replace)
    (provide 'init-visual-regexp)
#+end_src
** plantuml mode
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-plantuml-mode.el
:END:

#+begin_src emacs-lisp
  (require 'plantuml-mode)

  (setq plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
  ;; Enable plantuml-mode for PlantUML files
  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))

  (add-to-list
    'org-src-lang-modes '("plantuml" . plantuml))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((plantuml . t)))
  (setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")

  (provide 'init-plantuml-mode)
#+end_src

** org roam
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org-roam.el
:END:

*** basic
#+begin_src emacs-lisp
  (require 'org-roam)

  (add-to-list 'load-path "~/.emacs.d/lib/org-roam/extensions/")  
  (require 'org-roam-dailies)
  (require 'org-roam-export)
  (require 'org-roam-graph)
  (require 'org-roam-overlay)
  (require 'org-roam-protocol)

  (setq org-roam-directory (file-truename "~/Documents/roam/"))
  (setq org-roam-db-gc-threshold most-positive-fixnum)
  (setq org-roam-complete-everywhere t)

  (define-key global-map (kbd "C-c n l") 'org-roam-buffer-toggle)
  (define-key global-map (kbd "C-c n f") 'org-roam-node-find)
  (define-key global-map (kbd "C-c n g") 'org-roam-graph)
  (define-key global-map (kbd "C-c n i") 'org-roam-node-insert)
  ;; (define-key global-map (kbd "C-c n c") 'org-roam-capture)
  (define-key global-map (kbd "C-c n d") 'org-roam-dailies-map)
  (define-key global-map (kbd "C-c n h") 'org-id-get-create)
  (define-key global-map (kbd "C-c n j") 'org-roam-dailies-capture-today)

  (org-roam-db-autosync-mode 1)
#+end_src

*** ui
#+begin_src emacs-lisp
  (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Return the TYPE of NODE."
    (condition-case nil
        (file-name-nondirectory
         (directory-file-name
          (file-name-directory
           (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (error "")))

  (setq org-roam-node-display-template
        (concat "${type:15} ${title:*} " (propertize "${tags:20}" 'face 'org-tag)))
#+end_src


*** template

#+begin_src emacs-lisp
  (defun jethro/tag-new-node-as-draft ()
    (org-roam-tag-add '("draft")))
  (add-hook 'org-roam-capture-new-node-hook #'jethro/tag-new-node-as-draft)


  (setq org-roam-capture-templates
        '(
          ("g" "Game" plain "%?"
           :if-new (file+head "game/%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+title: ${title}\n#+filetags:\n")`
  	     :immediate-finish t
  	     :unnarrowed t)
          ("m" "Main" plain  "%?"
           :if-new (file+head "main/${slug}.org"
                              "#+title: ${title}\n#+filetags: \n")
           :immediate-finish t
           :unnarrowed t)
          ("r" "Reference" plain "%?"
           :if-new
           (file+head "reference/${title}.org" "#+title: ${title}\n#+filetags: \n")
           :immediate-finish t
           :unnarrowed t)
          ("a" "Article" plain "%?"
           :if-new
           (file+head "article/${title}.org" "#+title: ${title}\n#+filetags: :article:\n")
           :immediate-finish t
           :unnarrowed t)
          ("c" "Coding" plain "%?"
           :if-new
           (file+head "coding/${title}.org" "#+title: ${title}\n#+filetags: \n")
           :immediate-finish t
           :unnarrowed t)
          ("i" "Idea" plain "%?"
           :if-new
           (file+head "idea/${title}.org" "#+title: ${title}\n#+filetags: \n")
           :immediate-finish t
           :unnarrowed t)
          ("R" "Reading" plain "%?"
           :if-new (file+head "reading/${title}.org"
                              "#+title: ${title}\n#+filetags: \n* ${title}\n:PROPERTIES:\n:NOTER_DOCUMENT: ~/Documents/calibre_library\n:NOTER_PAGE:\n:END:")
           :immediate-finish t
           :unnarrowed t)
          ("w" "Web" plain "%?"
           :if-new
           (file+head "web/${title}.org" "#+title: ${title}\n#+filetags: \n")
           :immediate-finish t
           :unnarrowed t)
          ("s" "Stem" plain "%?"
           :if-new
           (file+head "stem/${title}.org" "#+title: ${title}\n#+filetags: \n")
           :immediate-finish t
           :unnarrowed t)                
          ))


#+end_src


*** agenda

#+begin_src emacs-lisp
  (defun vulpea-todo-p ()
    "Return non-nil if current buffer has any todo entry.
    TODO entries marked as done are ignored, meaning the this
    function returns nil if current buffer contains only completed
    tasks."
    (seq-find                                 ; (3)
     (lambda (type)
       (eq type 'todo))
     (org-element-map                         ; (2)
         (org-element-parse-buffer 'headline) ; (1)
         'headline
       (lambda (h)
         (org-element-property :todo-type h)))))

  (defun vulpea-todo-update-tag ()
    "Update TODO tag in the current buffer."
    (when (and (not (active-minibuffer-window))
               (vulpea-buffer-p))
      (save-excursion
        (goto-char (point-min))
        (let* ((tags (vulpea-buffer-tags-get))
               (original-tags tags))
          (if (vulpea-todo-p)
              (setq tags (cons "todo" tags))
            (setq tags (remove "todo" tags)))

          ;; cleanup duplicates
          (setq tags (seq-uniq tags))

          ;; update tags if changed
          (when (or (seq-difference tags original-tags)
                    (seq-difference original-tags tags))
            (apply #'vulpea-buffer-tags-set tags))))))

  (defun vulpea-buffer-p ()
    "Return non-nil if the currently visited buffer is a note."
    (and buffer-file-name
         (string-prefix-p
          (expand-file-name (file-name-as-directory org-roam-directory))
          (file-name-directory buffer-file-name))))

  (defun vulpea-todo-files ()
    "Return a list of note files containing 'todo' tag." ;
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
                :from tags
                :left-join nodes
                :on (= tags:node-id nodes:id)
                :where (like tag (quote "%\"todo\"%"))]))))


  (defun vulpea-agenda-files-update (&rest _)
    "Update `org-agenda-files' by merging with current files.
    This function accepts any number of arguments, as required by advice."
    (let ((custom-agenda-files '("~/Documents/org/agenda.org")))
      (setq org-agenda-files
            (seq-uniq
             (append custom-agenda-files
                     (vulpea-todo-files))))))

  (add-hook 'find-file-hook #'vulpea-todo-update-tag)
  (add-hook 'before-save-hook #'vulpea-todo-update-tag)

  (advice-add 'org-agenda :before #'vulpea-agenda-files-update)
  (advice-add 'org-todo-list :before #'vulpea-agenda-files-update)

  ;; functions borrowed from `vulpea' library
  ;; https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el

  (defun vulpea-buffer-tags-get ()
    "Return filetags value in current buffer."
    (vulpea-buffer-prop-get-list "filetags" "[ :]"))

  (defun vulpea-buffer-tags-set (&rest tags)
    "Set TAGS in current buffer.
    If filetags value is already set, replace it."
    (if tags
        (vulpea-buffer-prop-set
         "filetags" (concat ":" (string-join tags ":") ":"))
      (vulpea-buffer-prop-remove "filetags")))

  (defun vulpea-buffer-tags-add (tag)
    "Add a TAG to filetags in current buffer."
    (let* ((tags (vulpea-buffer-tags-get))
           (tags (append tags (list tag))))
      (apply #'vulpea-buffer-tags-set tags)))

  (defun vulpea-buffer-tags-remove (tag)
    "Remove a TAG from filetags in current buffer."
    (let* ((tags (vulpea-buffer-tags-get))l
           (tags (delete tag tags)))
      (apply #'vulpea-buffer-tags-set tags)))

  (defun vulpea-buffer-prop-set (name value)
    "Set a file property called NAME to VALUE in buffer file.
    If the property is already set, replace its value."
    (setq name (downcase name))
    (org-with-point-at 1
      (let ((case-fold-search t))
        (if (re-search-forward (concat "^#\\+" name ":\\(.*\\)")
                               (point-max) t)
            (replace-match (concat "#+" name ": " value) 'fixedcase)
          (while (and (not (eobp))
                      (looking-at "^[#:]"))
            (if (save-excursion (end-of-line) (eobp))
                (progn
                  (end-of-line)
                  (insert "\n"))
              (forward-line)
              (beginning-of-line)))
          (insert "#+" name ": " value "\n")))))

  (defun vulpea-buffer-prop-set-list (name values &optional separators)
    "Set a file property called NAME to VALUES in current buffer.
    VALUES are quoted and combined into single string using
    `combine-and-quote-strings'.
    If SEPARATORS is non-nil, it should be a regular expression
    matching text that separates, but is not part of, the substrings.
    If nil it defaults to `split-string-default-separators', normally
    \"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t.
    If the property is already set, replace its value."
    (vulpea-buffer-prop-set
     name (combine-and-quote-strings values separators)))

  (defun vulpea-buffer-prop-get (name)
    "Get a buffer property called NAME as a string."
    (org-with-point-at 1
      (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
                               (point-max) t)
        (buffer-substring-no-properties
         (match-beginning 1)
         (match-end 1)))))

  (defun vulpea-buffer-prop-get-list (name &optional separators)
    "Get a buffer property NAME as a list using SEPARATORS.
    If SEPARATORS is non-nil, it should be a regular expression
    matching text that separates, but is not part of, the substrings.
    If nil it defaults to `split-string-default-separators', normally
    \"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t."
    (let ((value (vulpea-buffer-prop-get name)))
      (when (and value (not (string-empty-p value)))
        (split-string-and-unquote value separators))))

  (defun vulpea-buffer-prop-remove (name)
    "Remove a buffer property called NAME."
    (org-with-point-at 1
      (when (re-search-forward (concat "\\(^#\\+" name ":.*\n?\\)")
                               (point-max) t)
        (replace-match ""))))
#+end_src


*** END
#+begin_src emacs-lisp
  (provide 'init-org-roam)
#+end_src


** pdf-tools
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-pdf-tools.el
:END:

#+begin_src emacs-lisp
  (require 'pdf-tools)

  (require 'pdf-occur)
  (require 'pdf-history)
  (require 'pdf-links)
  (require 'pdf-outline)
  (require 'pdf-annot)
  (require 'pdf-sync)

  (pdf-tools-install)

  (dolist (mode '(pdf-view-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (add-hook 'pdf-view-mode-hook 'pdf-view-fit-width-to-window) ;; 自动放大到页宽

  (setq TeX-PDF-mode t)
  (setq TeX-source-correlate-mode t) ;; 编译后开启正反向搜索
  (setq TeX-source-correlate-method 'synctex) ;; 正反向搜索的执行方式
  (setq TeX-source-correlate-start-server t) ;; 不再询问是否开启服务器以执行反向搜索

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))) ;; 用pdf-tools 打开 pdf
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer) ;; 在完成编译后刷新 pdf 文件

  (define-key pdf-view-mode-map
              "d" 'pdf-view-next-page-command) ;; 向后翻页
  (define-key pdf-view-mode-map
              "a" 'pdf-view-previous-page-command) ;; 向前翻页
  (define-key pdf-view-mode-map
              "s" 'pdf-view-scroll-up-or-next-page) ;; 向下滑动
  (define-key pdf-view-mode-map
              "w" 'pdf-view-scroll-down-or-previous-page) ;; 向上滑动


  (define-key pdf-annot-minor-mode-map (kbd "C-a a") 'pdf-annot-add-highlight-markup-annotation) ;; 高亮
  (define-key pdf-annot-minor-mode-map (kbd "C-a s") 'pdf-annot-add-squiggly-markup-annotation) ;; 波浪线
  (define-key pdf-annot-minor-mode-map (kbd "C-a u") 'pdf-annot-add-underline-markup-annotation) ;; 下划线
  (define-key pdf-annot-minor-mode-map (kbd "C-a d") 'pdf-annot-delete) ;; 删除

  (define-key pdf-history-minor-mode-map "b" 'pdf-history-backward)

  (provide 'init-pdf-tools)
#+end_src
** pdf-view-restore
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-pdf-view-restore.el
:END:

#+begin_src emacs-lisp
  (require 'pdf-view-restore)

  (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode)
#+end_src

** org noter
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org-noter.el
:END:

#+begin_src emacs-lisp
  (require 'org-noter)

  (define-key global-map (kbd "C-c n n") 'org-noter)
  (define-key org-noter-doc-mode-map (kbd "e") 'org-noter-insert-note) ;; 加入左手键位
  (define-key org-noter-doc-mode-map (kbd "M-e") 'org-noter-insert-precise-note) ;; 加入左手键位
  ;; (with-eval-after-load 'org-noter
  ;;   (add-hook 'org-noter-insert-heading-hook #'org-id-get-create))

  (setq org-noter-auto-save-last-location t)
  (setq org-noter-highlight-selected-text t)
  (setq org-noter-max-short-selected-text-length 80)

  (setq org-noter-always-create-frame nil)
  (setq org-noter-separate-notes-from-heading t)

  (provide 'init-org-noter)
#+end_src
** super-save
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-super-save.el
:END:

#+begin_src emacs-lisp
  (require 'super-save)

  (setq super-save-auto-save-when-idle t)
  (setq auto-save-default nil)
  (setq super-save-silent t)

  (add-to-list 'super-save-triggers 'other-window)
  (add-to-list 'super-save-hook-triggers 'find-file-hook)

  (super-save-mode +1)

  (provide 'init-super-save)
#+end_src
** csv-mode
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-csv-mode.el
:END:

#+begin_src emacs-lisp
  (require 'csv-mode)
  (require 'color)

  (defun csv-highlight (&optional separator)
    (interactive (list (when current-prefix-arg (read-char "Separator: "))))
    (font-lock-mode 1)
    (let* ((separator (or separator ?\,))
           (n (count-matches (string separator) (pos-bol) (pos-eol)))
           (colors (cl-loop for i from 0 to 1.0 by (/ 2.0 n)
                            collect (apply #'color-rgb-to-hex 
                                           (color-hsl-to-rgb i 0.3 0.5)))))
      (cl-loop for i from 2 to n by 2 
               for c in colors
               for r = (format "^\\([^%c\n]+%c\\)\\{%d\\}" separator separator i)
               do (font-lock-add-keywords nil `((,r (1 '(face (:foreground ,c)))))))))

  (add-hook 'csv-mode-hook (lambda () (visual-line-mode -1)))
  (add-hook 'csv-mode-hook 'csv-highlight)
  ;; (add-hook 'csv-mode-hook 'csv-guess-set-separator)
  ;; (add-hook 'csv-mode-hook 'csv-align-mode)
  ;; (add-hook 'csv-mode-hook '(lambda () (interactive) (toggle-truncate-lines nil)))


  (provide 'init-csv-mode)
#+end_src

** org-download
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org-download.el
:END:

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-download-enable)
  ;; (add-hook 'dired-mode-hook 'org-download-enable)
  (setq-default org-download-method 'directory)
  (setq-default org-download-image-dir "./img")
  (setq-default org-download-heading-lvl 'nil)

  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c d c") 'org-download-clipboard)
    (define-key org-mode-map (kbd "C-c d i") 'org-download-image))

  (provide 'init-org-download)
#+end_src


** emmet-mode
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-emmet-mode.el
:END:

#+begin_src emacs-lisp
  (require 'emmet-mode)

  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  (add-hook 'html-mode-hook  'emmet-mode) ;; enable html
  (add-hook 'js-ts-mode-hook 'emmet-mode)
  (add-hook 'tsx-ts-mode-hook 'emmet-mode)
  (add-hook 'typescript-ts-mode-hook 'emmet-mode)
  
  (setq emmet-self-closing-tag-style " /") ;; default "/"
  ;; only " /", "/" and "" are valid.
  ;; eg. <meta />, <meta/>, <meta>

  (setq emmet-move-cursor-after-expanding t) ;; default t
  (setq emmet-move-cursor-between-quotes nil) ;; default nil

  ;; (add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2))) ;; indent 2 spaces.
  ;; (add-hook 'emmet-mode-hook (lambda () (setq emmet-indent-after-insert nil)))

  (provide 'init-emmet-mode)
#+end_src

** web-mode
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-web-mode.el
:END:

#+begin_src emacs-lisp
  (require 'web-mode)

  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
  
  (provide 'init-web-mode)
#+end_src
** vterm
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-vterm.el
:END:

#+begin_src emacs-lisp
  (require 'vterm)

  (setq vterm-shell "bash")
  (setq vterm-always-compile-mode t)
  (setq vterm-always-do-resize t)

  (define-key vterm-mode-map (kbd "C-q") #'vterm-send-next-key)

  (define-key global-map (kbd "C-c c t") 'vterm)

  (provide 'init-vterm)
#+end_src
** org-roam-ui
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org-roam-ui.el
:END:

#+begin_src emacs-lisp
  (require 'org-roam-ui)
  (require 'websocket)

  (with-eval-after-load 'org-roam
    (setq org-roam-ui-open-on-start nil
          org-roam-ui-update-on-save t
          org-roam-ui-sync-theme t)
    (org-roam-ui-mode 1))

  (provide 'init-org-roam-ui)
#+end_src

** treesit
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-treesit.el
:END:
  
#+begin_src emacs-lisp
  (require 'treesit)

  (setq treesit-language-source-alist
        '((bash "https://github.com/tree-sitter/tree-sitter-bash")
          (c "https://github.com/tree-sitter/tree-sitter-c")
          (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
          (cmake "https://github.com/uyha/tree-sitter-cmake")
          (csharp "https://github.com/tree-sitter/tree-sitter-c-sharp.git")
          (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
          (elisp "https://github.com/Wilfred/tree-sitter-elisp")
          (elixir "https://github.com/elixir-lang/tree-sitter-elixir")
          (haskell "https://github.com/tree-sitter/tree-sitter-haskell")        
          (css "https://github.com/tree-sitter/tree-sitter-css")        
          (go "https://github.com/tree-sitter/tree-sitter-go")
          (html "https://github.com/tree-sitter/tree-sitter-html")
          (java "https://github.com/tree-sitter/tree-sitter-java.git")        
          (javascript "https://github.com/tree-sitter/tree-sitter-javascript")
          (json "https://github.com/tree-sitter/tree-sitter-json")
          (php . ("https://github.com/tree-sitter/tree-sitter-php"))
          (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
          (make "https://github.com/alemuller/tree-sitter-make")
          (markdown "https://github.com/ikatyang/tree-sitter-markdown")
          (org . ("https://github.com/milisims/tree-sitter-org"))        
          (python "https://github.com/tree-sitter/tree-sitter-python")
          (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))        
          (toml "https://github.com/tree-sitter/tree-sitter-toml")
          (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
          (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
          (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
          (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
          (vue . ("https://github.com/merico-dev/tree-sitter-vue"))
          (kotlin . ("https://github.com/fwcd/tree-sitter-kotlin"))        
          (yaml "https://github.com/ikatyang/tree-sitter-yaml")
          (zig . ("https://github.com/GrayJack/tree-sitter-zig"))
          (clojure . ("https://github.com/sogaiu/tree-sitter-clojure"))        
          ))

  (setq major-mode-remap-alist
        '((c-mode . c-ts-mode)
          (c++-mode . c++-ts-mode)
          (conf-toml-mode . toml-ts-mode)
          (css-mode . css-ts-mode)
          (js-mode . js-ts-mode)
          (js2-mode . js-ts-mode)
          (python-mode . python-ts-mode)
          (java-mode . java-ts-mode)
          (clojure-mode . clojure-ts-mode)
          (yaml-mode . yaml-ts-mode)
          (typescript-mode . typescript-ts-mode)
          (json-mode . json-ts-mode)
          (sh-mode . bash-ts-mode)
          ;; (markdown-mode . markdown-ts-mode)
          ))

  (add-hook 'markdown-ts-mode-hook (lambda () (treesit-parser-create 'markdown)))
  (add-hook 'zig-mode-hook (lambda () (treesit-parser-create 'zig)))
  (add-hook 'mojo-mode-hook (lambda () (treesit-parser-create 'mojo)))
  (add-hook 'emacs-lisp-mode-hook (lambda () (treesit-parser-create 'elisp)))
  (add-hook 'ielm-mode-hook (lambda () (treesit-parser-create 'elisp)))
  (add-hook 'json-mode-hook (lambda () (treesit-parser-create 'json)))
  (add-hook 'go-mode-hook (lambda () (treesit-parser-create 'go)))
  (add-hook 'java-mode-hook (lambda () (treesit-parser-create 'java)))
  (add-hook 'java-ts-mode-hook (lambda () (treesit-parser-create 'java)))
  (add-hook 'clojure-mode-hook (lambda () (treesit-parser-create 'clojure)))
  (add-hook 'clojure-ts-mode-hook (lambda () (treesit-parser-create 'clojure)))
  (add-hook 'cider-repl-mode-hook (lambda () (treesit-parser-create 'clojure)))
  (add-hook 'php-mode-hook (lambda () (treesit-parser-create 'php)))
  (add-hook 'php-ts-mode-hook (lambda () (treesit-parser-create 'php)))
  (add-hook 'java-ts-mode-hook (lambda () (treesit-parser-create 'java)))
  (add-hook 'haskell-mode-hook (lambda () (treesit-parser-create 'haskell)))
  (add-hook 'kotlin-mode-hook (lambda () (treesit-parser-create 'kotlin)))
  (add-hook 'ruby-mode-hook (lambda () (treesit-parser-create 'ruby)))
  ;; (add-hook 'org-mode-hook (lambda () (treesit-parser-create 'org)))

  (add-hook 'web-mode-hook #'(lambda ()
                               (let ((file-name (buffer-file-name)))
                                 (when file-name
                                   (treesit-parser-create
                                    (pcase (file-name-extension file-name)
                                      ("vue" 'vue)
                                      ("html" 'html)
                                      ("php" 'php))))
                                 )))

  (setq treesit-font-lock-level 4)

  ;; for cmake-ts-mode
  (add-to-list 'auto-mode-alist '("CMakeLists\\.txt\\'" . cmake-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.cmake\\'" . cmake-ts-mode))

  (provide 'init-treesit)
#+end_src


** treesit-fold
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-treesit-fold.el
:END:

#+begin_src emacs-lisp
  (require 'treesit-fold)

  (define-key global-map (kbd "C-c k j") 'treesit-fold-close)
  (define-key global-map (kbd "C-c k J") 'treesit-fold-close-all)
  (define-key global-map (kbd "C-c k l") 'treesit-fold-open)
  (define-key global-map (kbd "C-c k ;") 'treesit-fold-open-recursively)
  (define-key global-map (kbd "C-c k L") 'treesit-fold-open-all)

  (global-treesit-fold-mode 1)
  (global-treesit-fold-indicators-mode 1)
  (setq treesit-fold-line-count-show t)  ; Show line count in folded regions
  ;; (setq treesit-fold-line-count-format " <%d lines> ")
  ;; (add-hook 'org-mode-hook (lambda () (setq treesit-fold-indicators-fringe 'right-fringe)))

  (setq treesit-fold-summary-show t)
  (setq treesit-fold-summary-max-length 60)
  (setq treesit-fold-summary-exceeded-string "...")
  (setq treesit-fold-summary-format " <S> %s ")

  (setq treesit-fold-line-comment-mode t)
        
  (provide 'init-treesit-fold)
#+end_src

** yaml-mode
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-yaml-mode.el
:END:

#+begin_src emacs-lisp
  (require 'yaml-mode)

  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (add-hook 'yaml-mode-hook
            '(lambda ()
               (define-key yaml-mode-map "\C-m" 'newline-and-indent)))

  (provide 'init-yaml-mode)
#+end_src

** citar
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-citar.el
:END:

*** basic
#+begin_src emacs-lisp
  (require 'citar)

  (setq org-cite-global-bibliography '("~/Documents/roam/biblio.bib"))
  (setq org-cite-insert-processor 'citar
        org-cite-follow-processor 'citar
        org-cite-activate-processor 'citar)
  (setq citar-bibliography org-cite-global-bibliography)
#+end_src
*** org roam
#+begin_src emacs-lisp
  (defun jethro/org-roam-node-from-cite (keys-entries)
    (interactive (list (citar-select-ref :multiple nil :rebuild-cache t)))
    (let ((title (citar--format-entry-no-widths (cdr keys-entries)
                                                "${author editor} :: ${title}")))
      (org-roam-capture- :templates
                         '(("r" "reference" plain "%?" :if-new
                            (file+head "reference/${citekey}.org"
                                       ":PROPERTIES:\n:ROAM_REFS: [cite:@${citekey}]\n:END:\n#+title: ${title}\n")
                            :immediate-finish t
                            :unnarrowed t))
                         :info (list :citekey (car keys-entries))
                         :node (org-roam-node-create :title title)
                         :props '(:finalize find-file))))
#+end_src

*** template
#+begin_src emacs-lisp 

  (setq citar-templates
        '((main . "${author editor:30%sn}     ${date year issued:4}     ${title:48}")
          (suffix . "          ${=key= id:15}    ${=type=:12}    ${tags keywords:*}")
          (preview . "${author editor:%etal} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
          (note . "Notes on ${author editor:%etal}, ${title}")))


#+end_src


*** END
#+begin_src emacs-lisp
  (provide 'init-citar)
#+end_src

** ivy-posframe
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ivy-posframe.el
:END:

#+begin_src emacs-lisp
  (require 'ivy-posframe)
  ;; display at `ivy-posframe-style'
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))


  (setq ivy-posframe-display-functions-alist
        '((swiper          . ivy-display-function-fallback)
         (org-roam-node-find . ivy-posframe-display-at-frame-center)
          (t               . ivy-posframe-display-at-window-bottom-left)))
  ;; (ivy-posframe-mode 1)


  (setq ivy-posframe-height-alist '(
                                    (t . 12)
                                    ;; (swiper . 30)
                                    ))

  (setq ivy-posframe-width 90)

  (setq ivy-posframe-parameters
        '((left-fringe . 20)
          (right-fringe . 8)))

  (ivy-posframe-mode 1)

  (provide 'init-ivy-posframe)
#+end_src

** ox-hugo
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ox-hugo.el
:END:

#+begin_src emacs-lisp
  (with-eval-after-load 'ox
    (require 'ox-hugo))



  (defun my-hugo-push ()
    (interactive) ; 这使得函数可以通过 M-x 调用
      (message "正在运行 Hugo 构建命令...")
      (async-shell-command "cd ~/Documents/blog &&  hugo --minify && cd ~/Documents/blog/public && git add . &&  git commit -m \"Update with Emacs: $(date +\"%Y-%m-%d %H:%M\")\" && git push" "*Hugo Build Output*") ;命令，输出缓冲区

      (message "Hugo 命令序列已触发。")
      ;; 你也可以打开一个shell缓冲区来查看输出
      ;; (display-buffer (get-buffer "*Hugo Build Output*"))
      ;; (display-buffer (get-buffer "*Hugo Deploy Output*"))
      )

  (defun my-hugo-preview ()
    (interactive)
    ;; 这是一个非常重要的步骤，避免重复启动服务器导致端口冲突
    (message "正在检查并停止可能正在运行的 Hugo server 进程...")
    (let ((process-name "hugo-server-process"))
      (when (get-process process-name)
        (message "发现正在运行的 Hugo server 进程，正在停止...")
        (delete-process process-name)
        (sit-for 0.5)
        (message "Hugo server 进程已停止。")))

    (message "正在启动 Hugo 本地预览服务器 (hugo server -D)...")
    (async-shell-command "cd ~/Documents/blog && hugo server -D" "*Hugo Deploy Output*")

    (message "等待 Hugo 服务器启动...")
    (sit-for 0.5)
    
    (browse-url "http://localhost:1313/")
    (message "Hugo 本地预览已启动并在浏览器中打开。")) ;; <-- Added closing parenthesis


  ;; (defun my-hugo-stop ()
  ;;   (interactive)
  ;;   ;; 这是一个非常重要的步骤，避免重复启动服务器导致端口冲突
  ;;   (message "正在检查并停止可能正在运行的 Hugo server 进程...")
  ;;   (let ((process-name "hugo-server-process"))
  ;;     (when (get-process process-name)
  ;;       (message "发现正在运行的 Hugo server 进程，正在停止...")
  ;;       (delete-process process-name)
  ;;       (sit-for 0.5)
  ;;       (message "Hugo server 进程已停止。"))
  ;;     (unless (get-process process-name)
  ;;             (message "did not find hugo server process running"))))
  ;; (define-key global-map (kbd "C-c b s") 'my-hugo-stop)  

  (define-key global-map (kbd "C-c b l") 'my-hugo-preview)
  (define-key global-map (kbd "C-c b p") 'my-hugo-push)


  (provide 'init-ox-hugo)
#+end_src

** quickrun
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-quickrun.el
:END:

#+begin_src emacs-lisp
  (require 'quickrun)

  (define-key global-map (kbd "C-c c r") 'quickrun)

  (setq quickrun-focus-p t)
  (setq quickrun-truncate-lines t)

  ;; ;; Use this parameter as C++ default
  ;; (quickrun-add-command "c++/c1z"
  ;;   '((:command . "g++")
  ;;     (:exec    . ("%c -std=c++1z %o -o %e %s"
  ;;          "%e %a"))
  ;;     (:remove  . ("%e")))
  ;;   :default "c++")

  ;; ;; Use this parameter in pod-mode
  ;; (quickrun-add-command "pod"
  ;;   '((:command . "perldoc")
  ;;     (:exec    . "%c -T -F %s"))
  ;;   :mode 'pod-mode)

  ;; ;; You can override existing command
  ;; (quickrun-add-command "c/gcc"
  ;;   '((:exec . ("%c -std=c++1z %o -o %e %s"
  ;;           "%e %a")))
  ;;   :override t)

  (quickrun-add-command "python" ; 这是 quickrun 识别的语言名称，对应 quickrun-mode-alist 中的 entry
    '((:command . "python3")
      (:exec . ("%s %a")))
    :override t )

  (provide 'init-quickrun)
#+end_src


** org-fragtog
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org-fragtog.el
:END:

#+begin_src emacs-lisp
  (require 'org-fragtog)

  (add-hook 'org-mode-hook 'org-fragtog-mode)

  (provide 'init-org-fragtog)
#+end_src

** hydra
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-hydra.el
:END:

*** require
#+begin_src emacs-lisp
  (require 'hydra)
  (require 'major-mode-hydra)
  (require 'pretty-hydra)
  (require 'org-tempo)
  (require 'posframe)
#+end_src
*** hydra-posframe
#+begin_src emacs-lisp
  (defgroup hydra-posframe nil
    "Using posframe to show hydra"
    :group 'hydra
    :prefix "hydra-posframe")

  (defcustom hydra-posframe-parameters nil
    "The frame parameters used by hydra-posframe."
    :type 'string
    :group 'hydra-posframe)

  (defcustom hydra-posframe-border-width 1
    "The border width used by hydra-posframe.
  When 0, no border is showed."
    :group 'hydra-posframe
    :type 'number)

  (defcustom hydra-posframe-poshandler 'posframe-poshandler-frame-center
    "The poshandler used by hydra-posframe."
    :group 'hydra-posframe
    :type 'function)

  (defcustom hydra-posframe-font nil
    "The font used by hydra-posframe.
  When nil, Using current frame's font as fallback."
    :group 'hydra-posframe
    :type 'string)

  (defface hydra-posframe-face
    '((t :inherit default))
    "The background and foreground color of the posframe.
  `background' and `foreground` are used in this face."
    :group 'hydra-posframe)

  (defface hydra-posframe-border-face
    '((t (:background "gray50")))
    "The border color of the posframe.
  Only `background` is used in this face."
    :group 'hydra-posframe)

  (defvar hydra-posframe-buffer " *hydra-posframe-buffer*"
    "The posframe-buffer used by hydra-posframe.")

  (defun hydra-posframe-hide-window ()
    "Hide the hydra posframe"
    (posframe-hide hydra-posframe-buffer))

  (defun hydra-posframe-show-window (str)
    "Show hydra hints on the posframe"
    (posframe-show
     hydra-posframe-buffer
     :font hydra-posframe-font
     :poshandler hydra-posframe-poshandler
     :foreground-color (face-foreground 'hydra-posframe-face nil t)
     :background-color (face-background 'hydra-posframe-face nil t)
     :border-width hydra-posframe-border-width
     :border-color (face-attribute 'hydra-posframe-border-face :background)
     :string (concat str "\n")
     :override-parameters hydra-posframe-parameters)
    (let ((current-frame
           (buffer-local-value 'posframe--frame
                               (get-buffer hydra-posframe-buffer))))
      (redirect-frame-focus current-frame
                            (frame-parent current-frame))))

  ;;;###autoload
  (define-minor-mode hydra-posframe-mode
    "Display hydra via posframe."
    :init-value nil
    :global t
    :require 'hydra-posframe
    :group 'hydra-posframe
    (let ((hydra-posframe-list (list 'hydra-posframe
                                     #'hydra-posframe-show-window
                                     #'hydra-posframe-hide-window)))
      (if hydra-posframe-mode
          (progn
            (add-to-list 'hydra-hint-display-alist hydra-posframe-list)
            (setq hydra-hint-display-type 'hydra-posframe))
        (progn
          (setq hydra-hint-display-alist
                (delete hydra-posframe-list hydra-hint-display-alist))
          (setq hydra-hint-display-type 'lv)))))

  ;;;###autoload
  (defun hydra-posframe-enable ()
    "Enable hydra-posframe."
    (interactive)
    (hydra-posframe-mode 1)
    (message "hydra-posframe: suggest use `hydra-posframe-mode` instead."))

  (hydra-posframe-mode 1)
#+end_src
*** hydra-org
#+begin_src emacs-lisp 
  (defun hot-expand (str &optional mod)
    "Expand org template.

  STR is a structure template string recognised by org like <s. MOD is a
  string with additional parameters to add the begin line of the
  structure element. HEADER string includes more parameters that are
  prepended to the element after the #+HEADER: tag."
    (let (text)
      (when (region-active-p)
        (setq text (buffer-substring (region-beginning) (region-end)))
        (delete-region (region-beginning) (region-end)))
      (insert str)
      (if (fboundp 'org-try-structure-completion)
          (org-try-structure-completion) ; < org 9
        (progn
          (org-tempo-complete-tag)))
      (when mod (insert mod) (forward-line))
      (when text (insert text))))

   (pretty-hydra-define org-hydra
    (:color blue :quit-key "C-g" :title "Org Hydra")
    ("Basic"
     (("a" (hot-expand "<a") "ascii")
      ("c" (hot-expand "<c") "center")
      ("C" (hot-expand "<C") "comment")
      ("x" (hot-expand "<e") "example")
      ("E" (hot-expand "<E") "export")
      ("h" (hot-expand "<h") "html")
      ("l" (hot-expand "<l") "latex")
      ;; ("n" (hot-expand "<n") "note")
      ;; ("v" (hot-expand "<v") "verse")
      ("q" (hot-expand "<q") "quote"))
      
     ;; "Head"
     ;; (("i" (hot-expand "<i") "index")
     ;;  ("A" (hot-expand "<A") "ASCII")
     ;;  ("I" (hot-expand "<I") "INCLUDE")
     ;;  ("H" (hot-expand "<H") "HTML")
     ;;  ("L" (hot-expand "<L") "LaTeX"))
     "Source"
     (("s" (hot-expand "<s") "src")
      ("e" (hot-expand "<s" "emacs-lisp") "emacs-lisp")
      ("p" (hot-expand "<s" "python :results output") "python")
      ("j" (hot-expand "<s" "javascript") "javascript")
      ("w" (hot-expand "<s" "powershell") "powershell")
      ("r" (hot-expand "<s" "ruby") "ruby")
      ("S" (hot-expand "<s" "sh") "sh")
      ("g" (hot-expand "<s" "go :imports '\(\"fmt\"\)") "golang"))
     "Misc"
     (("m" (hot-expand "<s" "mermaid :file chart.png") "mermaid")
      ("u" (hot-expand "<s" "plantuml :file chart.png") "plantuml")
      ("Y" (hot-expand "<s" "ipython :session :exports both :results raw drawer\n$0") "ipython")
      ("P" (progn
            (insert "#+HEADERS: :results output :exports both :shebang \"#!/usr/bin/env perl\"\n")
            (hot-expand "<s" "perl")) "Perl tangled")
      ("<" self-insert-command "ins"))))


  (with-eval-after-load 'org
    ;; 确保 org-hydra/body 在 org-mode-map 中可用
    (define-key org-mode-map (kbd "<")
      (lambda ()
        "Insert org template."
        (interactive)
        (if (or (region-active-p) (looking-back "^\\s-*" 1))
            (org-hydra/body)
          (self-insert-command 1)))))
#+end_src
*** END

#+begin_src emacs-lisp
  (provide 'init-hydra)
#+end_src
** sudo-edit
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-sudo-edit.el
:END:


#+begin_src emacs-lisp 
  (require 'sudo-edit)

  (define-key global-map (kbd "C-c s") 'sudo-edit)

  (provide 'init-sudo-edit)
#+end_src
** neotree
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-neotree.el
:END:
#+begin_src emacs-lisp
  (require 'neotree)

  ;; (global-set-key [f8] 'neotree-toggle)
  (global-set-key (kbd "C-c c n") 'neotree-toggle)
  (setq projectile-switch-project-action 'neotree-projectile-action)
  (setq project-find-file 'neotree-projectile-action)

  ;; (defun neotree-ffip-project-dir ()
  ;;   "Open NeoTree using the git root."
  ;;   (interactive)
  ;;   (let ((project-dir (ffip-project-root))
  ;;         (file-name (buffer-file-name)))
  ;;     (if project-dir
  ;;         (progn
  ;;           (neotree-dir project-dir)
  ;;           (neotree-find file-name))
  ;;       (message "Could not find git project root."))))

  ;; (define-key map (kbd "C-c C-p") 'neotree-ffip-project-dir)

  (add-hook 'neotree-mode-hook (lambda ()
                                 (display-line-numbers-mode -1)))

  (define-key neotree-mode-map (kbd "M-o") 'other-window)
  (define-key neotree-mode-map (kbd "M-O") (lambda () (interactive) (other-window -1)))

  (provide 'init-neotree)
#+end_src
** leetcode
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-leetcode.el
:END:


#+begin_src emacs-lisp 
  (require 'leetcode)

  (setq leetcode-prefer-language "cpp") 

  ;; (setq leetcode-prefer-sql "mysql")

  (setq leetcode-save-solutions t)
  (setq leetcode-directory "~/Documents/cs_learning/leetcode")

  ;; (setq leetcode-prefer-tag-display nil)

  (global-set-key (kbd "C-c c l") 'leetcode)

  (add-hook 'leetcode--problems-mode-hook
            (lambda () (display-line-numbers-mode -1)))
  (add-hook 'leetcode--problem-detail-mode-hook
            (lambda () (display-line-numbers-mode -1)))

  (provide 'init-leetcode)
#+end_src
** fingertip
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-fingertip.el
:END:

#+begin_src emacs-lisp
    (require 'fingertip)

    (dolist (hook (list
                   'bash-ts-mode-hook
                   'c++-mode-hook
                   'c++-ts-mode-hook
                   'c-mode-common-hook
                   'c-mode-hook
                   'c-ts-mode-hook
                   'cmake-ts-mode-hook
                   'coffee-mode-hook
                   'conf-toml-mode-hook
                   'css-mode-hook
                   'css-ts-mode-hook
                   'emacs-lisp-mode-hook
                   'go-mode-hook
                   'haskell-mode-hook
                   'ielm-mode-hook
                   'jade-mode-hook
                   'java-mode-hook
                   'js-mode-hook
                   'js-ts-mode-hook
                   'json-ts-mode-hook
                   'kotlin-mode-hook
                   'lisp-interaction-mode-hook
                   'lisp-mode-hook
                   'llvm-mode-hook
                   'lua-mode-hook
                   'makefile-gmake-mode-hook
                   'markdown-ts-mode-hook
                   'maxima-mode-hook
                   'mojo-mode-hook
                   'nim-mode-hook
                   'php-mode-hook
                   'php-ts-mode-hook
                   'python-mode-hook
                   'python-ts-mode-hook
                   'qmake-mode-hook
                   'qml-mode-hook
                   'ruby-mode-hook
                   'rust-mode-hook
                   'rust-ts-mode-hook
                   'sh-mode-hook
                   'swift-mode-hook
                   'toml-ts-mode-hook
                   'typescript-mode-hook
                   'typescript-ts-mode-hook
                   'web-mode-hook
                   'zig-mode-hook
                   'fsharp-mode-hook
                   'clojure-mode-hook
                   'clojure-ts-mode-hook
                   'cider-repl-mode-hook
                   'nix-mode-hook
                   'solidity-mode-hook
                   'org-mode-hook
                   ))
      (add-hook hook #'(lambda ()
                         (when (or
                                (not (buffer-file-name))
                                (not (string-equal (file-name-extension (buffer-file-name)) "chat")))
                           (fingertip-mode 1)))
  ))


    (define-key fingertip-mode-map (kbd "(") 'fingertip-open-round)
    (define-key fingertip-mode-map (kbd "[") 'fingertip-open-bracket)
    (define-key fingertip-mode-map (kbd "{") 'fingertip-open-curly)
    (define-key fingertip-mode-map (kbd ")") 'fingertip-close-round)
    (define-key fingertip-mode-map (kbd "]") 'fingertip-close-bracket)
    (define-key fingertip-mode-map (kbd "}") 'fingertip-close-curly)
    (define-key fingertip-mode-map (kbd "=") 'fingertip-equal)

    (define-key fingertip-mode-map (kbd "（") 'fingertip-open-chinese-round)
    (define-key fingertip-mode-map (kbd "「") 'fingertip-open-chinese-bracket)
    (define-key fingertip-mode-map (kbd "【") 'fingertip-open-chinese-curly)
    (define-key fingertip-mode-map (kbd "）") 'fingertip-close-chinese-round)
    (define-key fingertip-mode-map (kbd "」") 'fingertip-close-chinese-bracket)
    (define-key fingertip-mode-map (kbd "】") 'fingertip-close-chinese-curly)

    (define-key fingertip-mode-map (kbd "%") 'fingertip-match-paren)
    (define-key fingertip-mode-map (kbd "\"") 'fingertip-double-quote)
    (define-key fingertip-mode-map (kbd "'") 'fingertip-single-quote)

    (define-key fingertip-mode-map (kbd "SPC") 'fingertip-space)
    (define-key fingertip-mode-map (kbd "RET") 'fingertip-newline)

    (define-key fingertip-mode-map (kbd "M-n") 'backward-delete-char)
    (define-key fingertip-mode-map (kbd "M-N") 'backward-kill-word)
    (define-key fingertip-mode-map (kbd "C-k") 'fingertip-kill)

    ;; ???
    (define-key fingertip-mode-map (kbd "M-\"") 'fingertip-wrap-double-quote)
    (define-key fingertip-mode-map (kbd "M-'") 'fingertip-wrap-single-quote)
    (define-key fingertip-mode-map (kbd "M-[") 'fingertip-wrap-bracket)
    (define-key fingertip-mode-map (kbd "M-{") 'fingertip-wrap-curly)
    (define-key fingertip-mode-map (kbd "M-(") 'fingertip-wrap-round)
    (define-key fingertip-mode-map (kbd "M-)") 'fingertip-unwrap)

    (define-key fingertip-mode-map (kbd "M-n") 'fingertip-jump-right)
    (define-key fingertip-mode-map (kbd "M-p") 'fingertip-jump-left)
    (define-key fingertip-mode-map (kbd "C-M-;") 'fingertip-jump-out-pair-and-newline) 

    (define-key fingertip-mode-map (kbd "C-j") 'fingertip-jump-up)

    (provide 'init-fingertip)
#+end_src

** move-text
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-move-text.el
:END:

#+begin_src emacs-lisp 
  (require 'move-text)

  (move-text-default-bindings)

  (defun indent-region-advice (&rest ignored)
    (let ((deactivate deactivate-mark))
      (if (region-active-p)
          (indent-region (region-beginning) (region-end))
        (indent-region (line-beginning-position) (line-end-position)))
      (setq deactivate-mark deactivate)))

  (advice-add 'move-text-up :after 'indent-region-advice)
  (advice-add 'move-text-down :after 'indent-region-advice)

  (provide 'init-move-text)
#+end_src
** tag
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-tag.el
:END:

#+begin_src emacs-lisp 
  (require 'highlight-matching-tag)
  (require 'instant-rename-tag)

  (with-eval-after-load 'web-mode
    (highlight-matching-tag 1))

  (define-key web-mode-map (kbd "C-M-<return>") 'instant-rename-tag)

  (provide 'init-tag)
#+end_src


* clone
** lsp bridge
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-lsp-bridge.el
:END:
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lib/lsp-bridge/")
  (require 'lsp-bridge)
  (require 'lsp-bridge-jdtls)

  ;;; Code:
  (add-hook 'find-file-hook #'lsp-bridge-restart-process)
  (add-hook 'org-edit-special-hook #'lsp-bridge-restart-process)

  (setq lsp-bridge-python-command (expand-file-name "~/.emacs.d/lsp-bridge-env/.venv/bin/python3"))

  (setq lsp-bridge-enable-completion-in-minibuffer t)
  (setq lsp-bridge-signature-show-function 'lsp-bridge-signature-show-with-frame)
  (setq lsp-bridge-enable-with-tramp t)
  (setq lsp-bridge-enable-org-babel nil)
  (setq acm-enable-capf t)
  (setq acm-enable-quick-access t)
  (setq acm-backend-yas-match-by-trigger-keyword t)
  (setq acm-enable-tabnine nil)
  (setq acm-enable-codeium nil)
  (setq acm-enable-lsp-workspace-symbol t)
  (setq lsp-bridge-enable-inlay-hint t)
  (setq lsp-bridge-semantic-tokens t)
  (setq-default lsp-bridge-semantic-tokens-ignore-modifier-limit-types ["variable"])

  (global-lsp-bridge-mode)

  (add-to-list 'lsp-bridge-multi-lang-server-extension-list '(("html") . "html_tailwindcss"))
  (add-to-list 'lsp-bridge-multi-lang-server-extension-list '(("css") . "css_tailwindcss"))

  (setq lsp-bridge-csharp-lsp-server "csharp-ls")
  (setq lsp-bridge-nix-lsp-server "nil")

  ;; 打开日志，开发者才需要
  ;; (setq lsp-bridge-enable-log t)

  (setq lsp-bridge-get-multi-lang-server-by-project
        (lambda (project-path filepath)
          ;; If typescript file include deno.land url, then use Deno LSP server.
          (save-excursion
            (when (string-equal (file-name-extension filepath) "ts")
              (dolist (buf (buffer-list))
                (when (string-equal (buffer-file-name buf) filepath)
                  (with-current-buffer buf
                    (goto-char (point-min))
                    (when (search-forward-regexp (regexp-quote "from \"https://deno.land") nil t)
                      (return "deno")))))))))

  (provide 'init-lsp-bridge)
#+end_src

* munual clone

** indent
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-indent.el
:END:

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 4)

  (defun adjust-languages-indent (n)
    (setq-local c-basic-offset n)

    (setq-local coffee-tab-width n)
    (setq-local javascript-indent-level n)
    (setq-local js-indent-level n)
    (setq-local js2-basic-offset n)

    (setq-local web-mode-attr-indent-offset n)
    (setq-local web-mode-attr-value-indent-offset n)
    (setq-local web-mode-code-indent-offset n)
    (setq-local web-mode-css-indent-offset n)
    (setq-local web-mode-markup-indent-offset n)
    (setq-local web-mode-sql-indent-offset n)

    (setq-local css-indent-offset n)

    (setq-local typescript-indent-level n))

  (dolist (hook (list
                 'c-mode-hook
                 'c++-mode-hook
                 'java-mode-hook
                 'haskell-mode-hook
                 'asm-mode-hook
                 'sh-mode-hook
                 'haskell-cabal-mode-hook
                 'ruby-mode-hook
                 'qml-mode-hook
                 'scss-mode-hook
                 'coffee-mode-hook
                 'rust-mode-hook
                 ))
    (add-hook hook #'(lambda ()
                       (setq indent-tabs-mode nil)
                       (adjust-languages-indent 4)
                       )))

  (dolist (hook (list
                 'web-mode-hook
                 'js-mode-hook
                 'js-ts-mode-hook
                 'typescript-mode-hook
                 ))
    (add-hook hook #'(lambda ()
                       (setq indent-tabs-mode nil)
                       (adjust-languages-indent 2)
                       )))

  (provide 'init-indent)
#+end_src 
** electric-pair-mode
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-electric-pair-mode.el
:END:
#+begin_src emacs-lisp
  (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
  (electric-pair-mode 1)

  (provide 'init-electric-pair-mode)
#+end_src
** modeline
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-modeline.el
:END:
#+begin_src emacs-lisp
  (setq-default mode-line-format
                (list
                 ;; Note: The original 'evil-state' check and icons are removed here.
                 ;; If you want a different fixed icon, you can add it back here.


                 '(:eval (when buffer-read-only
                           (propertize " " 'face 'error)))
                 
                 (propertize " %b"
                             'face 'mode-line-buffer-id 'help-echo (buffer-file-name))               
                 '(:eval (if (buffer-modified-p) "*" " ")) ; 如果缓冲区已修改，显示 "*"               

                 (propertize " %l:%c " 'face 'font-lock-builtin-face)
                 (propertize " %p " 'face 'font-lock-constant-face)

                 
                 ;; Spaces to align right
                 '(:eval (propertize
                          " " 'display
                          `((space :align-to (- (+ right right-fringe right-margin)
                                                ,(+ 3 (string-width mode-name)
                                                    (string-width (format-mode-line vc-mode))))))))
                 ;; VC/Git info
                 '(:eval (when-let (vc vc-mode)
                           (list " "
                                 (propertize (substring vc 5)
                                             'face 'font-lock-comment-face)
                                 " ")))
                 ;; The current major mode
                 (propertize " %m " 'face 'font-lock-string-face)))

  (add-hook 'pdf-view-mode-hook (lambda ()
                                  (setq-local mode-line-format
                                              (list
                                               (propertize " %P " 'face 'font-lock-string-face)))))


  ;; 将模式行的内容复制到标题行
  ;; (setq-default header-line-format mode-line-format)

  ;; 禁用底部的模式行
  ;; (setq-default mode-line-format nil)

  (provide 'init-modeline)
#+end_src
** tab-bar
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-tab-bar.el
:END:
#+begin_src emacs-lisp
  (tab-bar-mode 1)

  (setq tab-bar-close-button-show nil
        tab-bar-new-button-show nil 
        tab-bar-tab-hints t
        tab-bar-auto-width nil
        tab-bar-format '(tab-bar-format-tabs-groups tab-bar-separator))

  (defun tab-bar-tab-name-format-hints (name _tab i)
  	  (if tab-bar-tab-hints (concat (format "»%d«" i) "") name))
  (defun tab-bar-tab-group-format-default (tab _i &optional current-p)
  	(propertize
  	 (concat (funcall tab-bar-tab-group-function tab))
  	 'face (if current-p 'tab-bar-tab-group-current 'tab-bar-tab-group-inactive)))

  (add-to-list 'display-buffer-alist
  			   '("\\*scratch\\*"
  				 (display-buffer-in-tab display-buffer-full-frame)
  				 (tab-group . "[EMACS]")))

  ;; (defun ct/modus-themes-tab-bar-colors ()
  ;;   "Override tab faces to have even less variety"
  ;;   (modus-themes-with-colors
  ;;       (custom-set-faces
  ;;        `(tab-bar ((,c
  ;;                    :height 0.8
  ;;                    :background ,bg-main
  ;;                    :box nil)))
  ;;        `(tab-bar-tab ((,c
  ;;                        :background ,bg-main
  ;;                        :underline (:color ,blue-intense :style line)
  ;;                        :box (:line-width 2 :style flat-button))))
  ;;       `(tab-bar-tab-inactive ((,c
  ;;                                :background ,bg-main
  ;;                                :box (:line-width 2 :style flat-button)))))))

  ;; (add-hook 'modus-themes-after-load-theme-hook #'ct/modus-themes-tab-bar-colors)


  (defun emacs-solo/tab-group-from-project ()
  	"Call `tab-group` with the current project name as the group."
  	(interactive)
  	(when-let* ((proj (project-current))
  				(name (file-name-nondirectory
  					   (directory-file-name (project-root proj)))))
  	  (tab-group (format "[%s]" name))))

  (global-set-key (kbd "C-x t P") #'emacs-solo/tab-group-from-project)


  (defun emacs-solo/tab-switch-to-group ()
    "Prompt for a tab group and switch to its first tab.
  Uses position instead of index field."
    (interactive)
    (let* ((tabs (funcall tab-bar-tabs-function)))
  	(let* ((groups (delete-dups
                      (mapcar (lambda (tab)
  							  (funcall tab-bar-tab-group-function tab))
  							tabs)))
  		   (group (completing-read "Switch to group: " groups nil t)))
  	  (let ((i 1) (found nil))
  		(dolist (tab tabs)
  		  (let ((tab-group (funcall tab-bar-tab-group-function tab)))
  			(when (and (not found)
  					   (string= tab-group group))
  			  (setq found t)
  			  (tab-bar-select-tab i)))
  		  (setq i (1+ i)))))))

  (global-set-key (kbd "C-x t g") #'emacs-solo/tab-switch-to-group)

  ;; (use-package emacs
  ;;   :config
  ;;   (defface ct/tab-bar-numbers
  ;;     '((t
  ;;        :inherit tab-bar
  ;;        :family "SF Compact"
  ;;        :weight light))
  ;;     "Face for tab numbers in both active and inactive tabs.")
  ;;   (defvar kz/yi-numbers-alist
  ;;     '((0 . "☰")
  ;;       (1 . "☱")
  ;;       (2 . "☲")
  ;;       (3 . "☳")
  ;;       (4 . "☴")
  ;;       (5 . "☵")
  ;;       (6 . "☶")
  ;;       (7 . "☷"))
             
  ;;     "Alist of integers to strings of circled unicode numbers.")
  ;;   (defun ct/tab-bar-tab-name-format-default (tab i)
  ;;     (let ((current-p (eq (car tab) 'current-tab)))
  ;;       (concat
  ;;        (propertize
  ;;         (when (and tab-bar-tab-hints (< i 8)) (alist-get i kz/yi-numbers-alist))
  ;;         'face 'ct/tab-bar-numbers)
  ;;        " "
  ;;        (propertize
  ;;         (concat (alist-get 'name tab)
  ;; 	            (or (and tab-bar-close-button-show
  ;; 			             (not (eq tab-bar-close-button-show
  ;; 				                  (if current-p 'non-selected 'selected)))
  ;; 			             tab-bar-close-button)
  ;; 		            ""))
  ;;         'face (funcall tab-bar-tab-face-function tab))
  ;;        " ")))
    
  ;;   (setq tab-bar-tab-name-format-function #'ct/tab-bar-tab-name-format-default
  ;;         tab-bar-tab-hints t)
  ;;   (setq tab-bar-format
  ;; 	    '(;;tab-bar-format-history ;; forward/back buttons
  ;; 	      tab-bar-format-tabs-groups
  ;; 	      tab-bar-separator
  ;;           ;; tab-bar-format-add-tab ;; new tab button
  ;; 	      tab-bar-format-align-right
  ;; 	      tab-bar-format-global))
  ;;   )

  (provide 'init-tab-bar)
#+end_src
** eldoc
#+begin_src emacs-lisp
  (dolist (hook (list
                 'ielm-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'message-mode-hook
                 'Info-mode-hook
                 'erc-mode-hook
                 'org-mode-hook
                 ))
    (add-hook hook #'(lambda ()
                       (require 'eldoc)
                       (require 'eldoc-extension)
                       (setq eldoc-idle-delay 0.05) ;显示一定的延迟， 避免快速移动时minibuffer频繁闪烁
                       (setq eldoc-argument-case 'eldoc-argument-list) ;高亮函数参数
                       (turn-on-eldoc-mode)
                       )))
#+end_src

* Personal
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-personal.el
:END:

** open file in thunar
#+begin_src emacs-lisp 
  (defun my-open-current-dir-in-thunar()
    (interactive)
    (let ((dir (expand-file-name default-directory)))
      (start-process "thunar" nil "thunar" dir)
      (message "open %s in Thunar" dir)))

  (define-key global-map (kbd "C-c f") 'my-open-current-dir-in-thunar)
#+end_src

** pixel scrool

#+begin_src emacs-lisp
  (pixel-scroll-precision-mode t)

  (setq scroll-margin 3
        scroll-conservatively 101
        hscroll-margin 5)
#+end_src

** other window
#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-O") (lambda () (interactive) (other-window -1)))
#+end_src

** babel
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-'") 'org-edit-special)
#+end_src

** IDE
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c c C") 'compile)
  (global-set-key (kbd "C-c c c") 'recompile)
  (global-set-key (kbd "C-c c g") 'gdb)

  (setq gdb-many-windows t)
  (setq gud-gdb-enable-debuginfod t)

  ;; invoke
  ;; (global-set-key [f8] 'gdb)

  ;; ;; GDB layout
  ;; (defadvice gdb-setup-windows (after activate)
  ;;   (gdb-setup-my-windows)
  ;; )

  ;; (defun gdb-setup-my-windows ()
  ;;   (set-window-dedicated-p (selected-window) nil)
  ;;   (switch-to-buffer gud-comint-buffer)
  ;;   (delete-other-windows)
  ;;   (let
  ;;     ((win0 (selected-window))             ; source
  ;;      (win1 (split-window-horizontally
  ;;              (floor (* 0.5 (window-width)))))   ; gdb
  ;;      (win2 (split-window-vertically
  ;;              (floor (* 0.7 (window-body-height))))) ; bp
  ;;     )
  ;;     ;; set source buffer
  ;;     (set-window-buffer
  ;;      win0
  ;;      (if gud-last-last-frame
  ;;          (gud-find-file (car gud-last-last-frame))
  ;;        (if gdb-main-file
  ;;            (gud-find-file gdb-main-file)
  ;;          (list-buffers-noselect))))
  ;;     (setq gdb-source-window win0)

  ;;     (select-window win1)
  ;;     (split-window-vertically (floor (* 0.7 (window-body-height))))
  ;;     (split-window-horizontally (floor (* 0.7 (window-body-width))))
  ;;     (split-window-vertically (floor (* 0.4 (window-body-height))))

  ;;     ;; set locals window
  ;;     (gdb-set-window-buffer (gdb-get-buffer-create 'gdb-locals-buffer))
  ;;     ;; set assembly window
  ;;     (other-window 1)
  ;;     (gdb-set-window-buffer (gdb-stack-buffer-name))
  ;;     (other-window 1)
  ;;     (gdb-set-window-buffer (gdb-get-buffer-create 'gdb-registers-buffer))
  ;;     ;; set breakpoint buffer
  ;;     (other-window 1)
  ;;     (gdb-set-window-buffer (gdb-breakpoints-buffer-name))
  ;;     ;; set focus on gdb buffer
  ;;     (select-window win2)
  ;;   ))
#+end_src

** javascript
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.js\\'\\'" . js-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'\\'" . tsx-ts-mode)) ; 如果有 JSX
  (add-to-list 'auto-mode-alist '("\\.ts\\'\\'" . typescript-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'\\'" . tsx-ts-mode))
#+end_src

** subword-mode
#+begin_src emacs-lisp
  ;; use to handle camel name
  (global-subword-mode 1)
#+end_src

** jump and back

~C-u C-SPC~ will take you back to last mark. Many operation in Emacs will auto create a mark. 

** TODO read-only-mode
#+begin_src emacs-lisp :tangle no
  (defvar easy-nav-mode-map
    (let ((map (make-sparse-keymap)))
      ;; 用 n 和 p 来导航
      (define-key map (kbd "n") #'next-line)
      (define-key map (kbd "p") #'previous-line)
      (define-key map (kbd "b") #'backward-char)
      (define-key map (kbd "f") #'forward-char)
      
      (define-key map (kbd "M-f") #'forward-word)
      (define-key map (kbd "M-b") #'backward-word)
      
      (define-key map (kbd "a") #'beginning-of-line)
      (define-key map (kbd "e") #'end-of-line)
      
      (define-key map (kbd "y") #'yank)
      (define-key map (kbd "w") #'kill-ring-save)
      
      (define-key map (kbd "SPC") #'set-mark-command)    

      (define-key map (kbd "q") #'my/read-only-mode)
      map)
    "Keymap for `easy-nav-mode'.")


  (define-minor-mode easy-nav-mode
    "Minor mode for Vi-style navigation in read-only buffers."
    :lighter " Easy-Nav"
    :keymap easy-nav-mode-map
    :global nil
    ;; 使用 (if easy-nav-mode ...) 逻辑来决定如何处理
    (if easy-nav-mode
        (message "Easy-Nav mode enabled.")
      (message "Easy-Nav mode disabled.")))

  (defun my/read-only-mode (arg)
    "Toggle read-only-mode, and sync it with `easy-nav-mode'."
    (interactive)
    ;; 直接检查 buffer-read-only 变量的值
    (if buffer-read-only
        ;; 如果当前是只读模式，则关闭它和 easy-nav-mode
        (progn
          (read-only-mode nil)
          (easy-nav-mode nil))
      ;; 否则，打开只读模式和 easy-nav-mode
      (progn
        (read-only-mode t)
        (easy-nav-mode t))))

  ;; 替换默认的 C-x C-q 绑定，使其调用你的函数
  (global-set-key (kbd "C-x C-q") #'my/read-only-mode)
#+end_src


** dictionary
do first
#+begin_src sh :tangle no
  sudo apt install dictd
  sudo apt install dict-gcide 
  sudo apt install dict-jargon
#+end_src


#+begin_src emacs-lisp
  (require 'dictionary)

  (setq dictionary-server "localhost")

  (setq dictionary-default-dictionary-list '("gcide" "jargon"))
  (setq dictionary-default-search-dictionary "gcide")

  ;; 设置为在单个缓冲区中显示所有结果，避免创建过多的窗口。
  (setq dictionary-use-single-buffer t)

  ;; 设置 dictionary-mode 的字体样式，使其更易于阅读。
  ;; 这里我们使用自定义的 face，但你也可以根据自己的喜好调整。
  (custom-set-faces
   '(dictionary-word-face ((t (:inherit font-lock-variable-name-face :weight bold))))
   '(dictionary-definition-face ((t (:inherit default :weight normal))))
   '(dictionary-header-face ((t (:inherit font-lock-comment-face :height 1.1))))
   '(dictionary-info-face ((t (:inherit font-lock-doc-face))))
   )
#+end_src

** END

#+begin_src emacs-lisp
  (provide 'init-personal)
#+end_src

* test
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-test.el
:END:


#+begin_src emacs-lisp 
  (provide 'init-test)
#+end_src

* wish list
** org-tree-slide
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/site-lisp/org-tree-slide/")
  (require 'org-tree-slide)
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "<f8>") 'org-tree-slide-mode)
    (define-key org-mode-map (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle))

  ;; (when (require 'org-tree-slide nil t)
  ;;   (global-set-key (kbd "<f8>") 'org-tree-slide-mode)
  ;;   (global-set-key (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)
  ;;   (org-tree-slide-simple-profile))

  (with-eval-after-load "org-tree-slide"
    (define-key org-tree-slide-mode-map (kbd "<f9>") 'org-tree-slide-move-previous-tree)
    (define-key org-tree-slide-mode-map (kbd "<f10>") 'org-tree-slide-move-next-tree)
    )
#+end_src
** magit forge
** plantuml complete
** vundo
** project
** tabspace
** desktop
#+begin_src emacs-lisp
  (setq desktop-load-locked-desktop t) ; don't popup dialog ask user, load anyway
  (setq desktop-restore-frames nil)    ; don't restore any frame

  (desktop-save-mode 1)
#+end_src
